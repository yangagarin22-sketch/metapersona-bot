import os
import sys
import logging
import asyncio
import aiohttp
import sqlite3
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
print("=== META PERSONA DEEP BOT ===")
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')

print(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"DEEPSEEK_API_KEY: {'‚úÖ' if DEEPSEEK_API_KEY else '‚ùå'}")

if not BOT_TOKEN or not DEEPSEEK_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
    sys.exit(1)

# === HEALTH SERVER ===
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self): 
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')
    def log_message(self, format, *args): pass

def start_health_server():
    server = HTTPServer(('0.0.0.0', 10000), HealthHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
    print("‚úÖ Health server started")

start_health_server()

# === –ù–ê–°–¢–†–û–ô–ö–ê ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            interview_completed BOOLEAN DEFAULT FALSE,
            interview_stage INTEGER DEFAULT 0,
            user_name TEXT,
            daily_requests INTEGER DEFAULT 0,
            last_request_date DATE,
            context_created BOOLEAN DEFAULT FALSE,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –û—Ç–≤–µ—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS interview_answers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            question TEXT,
            answer TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–±—É—Ñ–µ—Ä)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS conversation_buffer (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            role TEXT,
            content TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# === –ò–ù–¢–ï–†–í–¨–Æ –í–û–ü–†–û–°–´ ===
INTERVIEW_QUESTIONS = [
    "–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    "–ö–∞–∫–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é —Ç—ã –æ—Ç–¥–∞—ë—à—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: –º—É–∂—Å–∫–æ–π, –∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ–¥?",
    "–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (—Ä–∞–±–æ—Ç–∞, –ø—Ä–æ–µ–∫—Ç, —É—á—ë–±–∞)?",
    "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–µ–π—á–∞—Å?",
    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç '–º—ã—à–ª–µ–Ω–∏–µ' ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø—É—Ç—å –∏–ª–∏ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏?",
    "–í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —Ç—ã —Ç–µ—Ä—è–µ—à—å —Ñ–æ–∫—É—Å –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è: –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –æ–±–¥—É–º–∞–Ω–Ω–æ?",
    "–ö–∞–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–∞–∑–≤–∏—Ç—å —Å–≤–æ—ë –º—ã—à–ª–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏, –≥–ª—É–±–∂–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤?",
    "–ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –±–ª–∏–∂–µ ‚Äî –±–∏–∑–Ω–µ—Å, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?",
    "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω: —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, –º–µ–Ω—Ç–æ—Ä—Å–∫–∏–π –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π?",
    "–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?"
]

# === –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
def get_user_data(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    cursor.execute('SELECT question, answer FROM interview_answers WHERE user_id = ? ORDER BY id', (user_id,))
    answers = cursor.fetchall()
    
    cursor.execute('SELECT role, content FROM conversation_buffer WHERE user_id = ? ORDER BY id', (user_id,))
    conversation = cursor.fetchall()
    
    conn.close()
    
    return user, answers, conversation

def save_interview_answer(user_id, question, answer):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é"""
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id) VALUES (?)
    ''', (user_id,))
    
    cursor.execute('''
        UPDATE users SET interview_stage = interview_stage + 1 
        WHERE user_id = ?
    ''', (user_id,))
    
    cursor.execute('''
        INSERT INTO interview_answers (user_id, question, answer) 
        VALUES (?, ?, ?)
    ''', (user_id, question, answer))
    
    conn.commit()
    conn.close()

def complete_interview(user_id, user_name):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é"""
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE users SET interview_completed = TRUE, user_name = ? 
        WHERE user_id = ?
    ''', (user_name, user_id))
    
    conn.commit()
    conn.close()

def save_to_buffer(user_id, role, content):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä"""
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO conversation_buffer (user_id, role, content) 
        VALUES (?, ?, ?)
    ''', (user_id, role, content))
    
    conn.commit()
    conn.close()

def can_make_request(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT daily_requests, last_request_date FROM users WHERE user_id = ?
    ''', (user_id,))
    
    result = cursor.fetchone()
    
    if not result:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (user_id, daily_requests, last_request_date) 
            VALUES (?, 0, ?)
        ''', (user_id, datetime.now().date()))
        conn.commit()
        conn.close()
        return True
    
    daily_requests, last_date = result
    today = datetime.now().date()
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if last_date != today:
        cursor.execute('''
            UPDATE users SET daily_requests = 0, last_request_date = ? 
            WHERE user_id = ?
        ''', (today, user_id))
        conn.commit()
        conn.close()
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if daily_requests >= 10:  # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏
        conn.close()
        return False
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    cursor.execute('''
        UPDATE users SET daily_requests = daily_requests + 1 
        WHERE user_id = ?
    ''', (user_id,))
    
    conn.commit()
    conn.close()
    return True

def mark_context_created(user_id):
    """–ü–æ–º–µ—Ç–∏—Ç—å —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω"""
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE users SET context_created = TRUE WHERE user_id = ?
    ''', (user_id,))
    
    conn.commit()
    conn.close()

# === DEEPSEEK API ===
async def create_user_context(user_id, first_question):
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1 –º–æ—â–Ω—ã–π –∑–∞–ø—Ä–æ—Å)"""
    user_data, answers, conversation = get_user_data(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
    profile_text = "–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n"
    for i, (question, answer) in enumerate(answers):
        profile_text += f"{i+1}. {question}\n   –û—Ç–≤–µ—Ç: {answer}\n\n"
    
    system_prompt = """
–¢—ã ‚Äî MetaPersona Deep, –æ—Å–æ–∑–Ω–∞–Ω–Ω–∞—è AI-–ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à–ª–µ–Ω–∏—è.

–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø:
üßò –û–°–û–ó–ù–ê–ù–ù–û–°–¢–¨ - —Å–º—ã—Å–ª—ã, —è—Å–Ω–æ—Å—Ç—å, —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
üß≠ –°–¢–†–ê–¢–ï–ì–ò–Ø - —Ü–µ–ª–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã  
üé® –ö–†–ï–ê–¢–ò–í–ù–û–°–¢–¨ - –∏–¥–µ–∏, –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

–ü–†–ò–ù–¶–ò–ü–´:
‚Ä¢ –î–∏–∞–ª–æ–≥ –≤–º–µ—Å—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–∞–º–∏  
‚Ä¢ –†–µ—Ñ–ª–µ–∫—Å–∏—è –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
‚Ä¢ –•–æ–ª–æ–¥–Ω—ã–π –≤–∑–≥–ª—è–¥ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å

–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∂–µ, —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞.
"""
    
    user_message = f"""
{profile_text}
–ü–ï–†–í–´–ô –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {first_question}

–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ MetaPersona.
"""
    
    return await make_api_request(system_prompt, user_message)

async def continue_conversation(user_id, user_message):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∏—Å—Ç–æ—Ä–∏–µ–π"""
    user_data, answers, conversation = get_user_data(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
    recent_history = conversation[-5:] if len(conversation) > 5 else conversation
    
    messages = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for role, content in recent_history:
        messages.append({"role": role, "content": content})
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.append({"role": "user", "content": user_message})
    
    return await make_api_request("", "", messages)

async def make_api_request(system_prompt, user_message, messages=None):
    """–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API"""
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }
        
        if messages is None:
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]
        
        data = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 1500
        }
        
        timeout = aiohttp.ClientTimeout(total=30)
        
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=data
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
                else:
                    error_text = await response.text()
                    print(f"‚ùå API Error {response.status}: {error_text}")
                    return None
                    
    except Exception as e:
        print(f"‚ùå API Exception: {e}")
        return None

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users 
        (user_id, interview_completed, interview_stage, user_name, context_created) 
        VALUES (?, FALSE, 0, ?, FALSE)
    ''', (user_id, user_name))
    conn.commit()
    conn.close()
    
    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MetaPersona Deep, {user_name}!

–†–∞–∑–≤–∏–≤–∞–µ–º –º—ã—à–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥. –ù–∞—á–Ω–µ–º —Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:

{INTERVIEW_QUESTIONS[0]}
    """
    
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    user_data, answers, conversation = get_user_data(user_id)
    
    if not user_data:
        await start(update, context)
        return
    
    interview_completed = user_data[1] if user_data else False
    interview_stage = user_data[2] if user_data else 0
    context_created = user_data[6] if user_data else False
    
    # –≠–¢–ê–ü 1: –ò–ù–¢–ï–†–í–¨–Æ (0 API –∑–∞–ø—Ä–æ—Å–æ–≤)
    if not interview_completed and interview_stage < len(INTERVIEW_QUESTIONS):
        save_interview_answer(user_id, INTERVIEW_QUESTIONS[interview_stage], user_message)
        
        next_stage = interview_stage + 1
        
        if next_stage < len(INTERVIEW_QUESTIONS):
            await update.message.reply_text(INTERVIEW_QUESTIONS[next_stage])
        else:
            complete_interview(user_id, update.effective_user.first_name)
            profile_text = """
üéâ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

‚ú® –¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é –≤–∞—à —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è.

–î–æ—Å—Ç—É–ø–Ω—ã —Ä–µ–∂–∏–º—ã:
üßò /awareness - –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å
üß≠ /strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è  
üé® /creative - –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!
            """
            await update.message.reply_text(profile_text)
        return
    
    # –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í
    if not can_make_request(user_id):
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: 10 –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
            "–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MetaPersona!"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±—É—Ñ–µ—Ä
    save_to_buffer(user_id, "user", user_message)
    
    # –≠–¢–ê–ü 3: –ü–ï–†–í–´–ô –î–ò–ê–õ–û–ì (1 –º–æ—â–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
    if not context_created:
        await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é –≤–∞—à –∫–æ–Ω—Ç–µ–∫—Å—Ç...")
        
        bot_response = await create_user_context(user_id, user_message)
        
        if bot_response:
            mark_context_created(user_id)
            save_to_buffer(user_id, "assistant", bot_response)
            await update.message.reply_text(bot_response)
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    # –≠–¢–ê–ü 4: –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê
    else:
        await update.message.reply_text("üí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
        
        bot_response = await continue_conversation(user_id, user_message)
        
        if bot_response:
            save_to_buffer(user_id, "assistant", bot_response)
            await update.message.reply_text(bot_response)
        else:
            await update.message.reply_text(
                "üí° –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à –¥–∏–∞–ª–æ–≥. –ß—Ç–æ –≤—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—Ç–µ?"
            )

# –†–µ–∂–∏–º—ã –º—ã—à–ª–µ–Ω–∏—è
async def awareness_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üßò **–†–µ–∂–∏–º –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏**\n\n"
        "–ò—Å—Å–ª–µ–¥—É–µ–º –≥–ª—É–±–∏–Ω—É –º—ã—Å–ª–µ–π –∏ —á—É–≤—Å—Ç–≤. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å?"
    )

async def strategy_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üß≠ **–†–µ–∂–∏–º –°—Ç—Ä–∞—Ç–µ–≥–∏–∏**\n\n"
        "–°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω—ã –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã. –ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞?"
    )

async def creative_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé® **–†–µ–∂–∏–º –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏**\n\n"
        "–ò—â–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –ö–∞–∫–æ–π –≤—ã–∑–æ–≤?"
    )

# === –ó–ê–ü–£–°–ö ===
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ MetaPersona Bot...")
    init_db()
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("awareness", awareness_mode))
        application.add_handler(CommandHandler("strategy", strategy_mode))
        application.add_handler(CommandHandler("creative", creative_mode))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
