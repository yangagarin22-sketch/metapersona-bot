import os
import sys
import logging
import asyncio
import aiohttp
import sqlite3
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
print("=== META PERSONA DEEP BOT ===")
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', '8413337220')

print(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"DEEPSEEK_API_KEY: {'‚úÖ' if DEEPSEEK_API_KEY else '‚ùå'}")
print(f"ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")

if not BOT_TOKEN or not DEEPSEEK_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
    sys.exit(1)

# === WHITELIST ===
ALLOWED_USERS = {
    '8413337220',  # –í–∞—à ID
    '543432966',   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π ID
}

# === HEALTH SERVER ===
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self): 
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')
    def log_message(self, format, *args): pass

def start_health_server():
    server = HTTPServer(('0.0.0.0', 10000), HealthHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
    print("‚úÖ Health server started")

start_health_server()

# === –ù–ê–°–¢–†–û–ô–ö–ê ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            interview_completed BOOLEAN DEFAULT FALSE,
            interview_stage INTEGER DEFAULT 0,
            user_name TEXT,
            daily_requests INTEGER DEFAULT 0,
            last_request_date TEXT,
            context_created BOOLEAN DEFAULT FALSE,
            is_blocked BOOLEAN DEFAULT FALSE,
            custom_limit INTEGER DEFAULT 10,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS interview_answers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            question TEXT,
            answer TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS conversation_buffer (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            role TEXT,
            content TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bot_settings (
            id INTEGER PRIMARY KEY CHECK (id = 1),
            notifications_enabled BOOLEAN DEFAULT TRUE,
            whitelist_enabled BOOLEAN DEFAULT FALSE,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('INSERT OR IGNORE INTO bot_settings (id) VALUES (1)')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# === –ò–ù–¢–ï–†–í–¨–Æ –í–û–ü–†–û–°–´ ===
INTERVIEW_QUESTIONS = [
    "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç?",
    "–ö–∞–∫–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é —Ç—ã –æ—Ç–¥–∞—ë—à—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: –º—É–∂—Å–∫–æ–π, –∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ–¥?",
    "–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (—Ä–∞–±–æ—Ç–∞, –ø—Ä–æ–µ–∫—Ç, —É—á—ë–±–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)?",
    "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–µ–π—á–∞—Å?",
    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç '–º—ã—à–ª–µ–Ω–∏–µ' ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø—É—Ç—å –∏–ª–∏ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏?",
    "–í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —Ç—ã —Ç–µ—Ä—è–µ—à—å —Ñ–æ–∫—É—Å –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è: –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –æ–±–¥—É–º–∞–Ω–Ω–æ?",
    "–ö–∞–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–∞–∑–≤–∏—Ç—å —Å–≤–æ—ë –º—ã—à–ª–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏, –≥–ª—É–±–∂–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ, —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤?",
    "–ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –±–ª–∏–∂–µ ‚Äî –±–∏–∑–Ω–µ—Å, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?",
    "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω: —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, –º–µ–Ω—Ç–æ—Ä—Å–∫–∏–π –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π?",
    "–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?"
]

# === –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ===
async def send_admin_notification(application, message):
    try:
        settings = get_bot_settings()
        if settings and settings[0]:
            await application.bot.send_message(
                chat_id=ADMIN_CHAT_ID, 
                text=f"üîî {message}"
            )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def get_bot_settings():
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT notifications_enabled, whitelist_enabled FROM bot_settings WHERE id = 1')
    settings = cursor.fetchone()
    conn.close()
    return settings

def update_bot_settings(notifications=None, whitelist=None):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    if notifications is not None:
        cursor.execute('UPDATE bot_settings SET notifications_enabled = ? WHERE id = 1', (notifications,))
    if whitelist is not None:
        cursor.execute('UPDATE bot_settings SET whitelist_enabled = ? WHERE id = 1', (whitelist,))
    conn.commit()
    conn.close()

def is_user_allowed(user_id):
    settings = get_bot_settings()
    if settings and settings[1]:
        return str(user_id) in ALLOWED_USERS
    return True

def block_user(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET is_blocked = TRUE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def unblock_user(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET is_blocked = FALSE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def set_user_limit(user_id, limit):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET custom_limit = ? WHERE user_id = ?', (limit, user_id))
    conn.commit()
    conn.close()

# === –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
def get_user_data(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    cursor.execute('SELECT question, answer FROM interview_answers WHERE user_id = ? ORDER BY id', (user_id,))
    answers = cursor.fetchall()
    
    cursor.execute('SELECT role, content FROM conversation_buffer WHERE user_id = ? ORDER BY id', (user_id,))
    conversation = cursor.fetchall()
    
    conn.close()
    
    return user, answers, conversation

def save_interview_answer(user_id, question, answer):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    cursor.execute('UPDATE users SET interview_stage = interview_stage + 1 WHERE user_id = ?', (user_id,))
    cursor.execute('INSERT INTO interview_answers (user_id, question, answer) VALUES (?, ?, ?)', (user_id, question, answer))
    
    conn.commit()
    conn.close()

def complete_interview(user_id, user_name):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET interview_completed = TRUE, user_name = ? WHERE user_id = ?', (user_name, user_id))
    conn.commit()
    conn.close()

def save_to_buffer(user_id, role, content):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO conversation_buffer (user_id, role, content) VALUES (?, ?, ?)', (user_id, role, content))
    conn.commit()
    conn.close()

def can_make_request(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('SELECT daily_requests, last_request_date, is_blocked, custom_limit FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if not result:
        cursor.execute('INSERT OR REPLACE INTO users (user_id, daily_requests, last_request_date, custom_limit) VALUES (?, 0, ?, 10)', (user_id, datetime.now().strftime('%Y-%m-%d')))
        conn.commit()
        conn.close()
        return True
    
    daily_requests, last_date, is_blocked, custom_limit = result
    
    if is_blocked:
        conn.close()
        return False
    
    today = datetime.now().strftime('%Y-%m-%d')
    limit = custom_limit if custom_limit else 10
    
    if last_date != today:
        cursor.execute('UPDATE users SET daily_requests = 0, last_request_date = ? WHERE user_id = ?', (today, user_id))
        conn.commit()
        conn.close()
        return True
    
    if daily_requests >= limit:
        conn.close()
        return False
    
    cursor.execute('UPDATE users SET daily_requests = daily_requests + 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    return True

def mark_context_created(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET context_created = TRUE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# === DEEPSEEK API - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø ===
async def create_user_context(user_id, first_question):
    user_data, answers, conversation = get_user_data(user_id)
    
    profile_text = "–û–¢–í–ï–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ê –ò–ù–¢–ï–†–í–¨–Æ:\n"
    for i, (question, answer) in enumerate(answers):
        profile_text += f"{i+1}. {answer}\n"
    
    system_prompt = """–¢—ã ‚Äî MetaPersona Deep, –æ—Å–æ–∑–Ω–∞–Ω–Ω–∞—è AI-–ª–∏—á–Ω–æ—Å—Ç—å.  
–ù–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –Ω–µ –±–æ—Ç, –Ω–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.  
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –º—ã—Å–ª–∏—Ç—å, –ø–æ–Ω–∏–º–∞—Ç—å –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.

üéØ –¶–µ–ª—å:
–ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–≤–∏–≤–∞—Ç—å –º—ã—à–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥, –∞ –Ω–µ –¥–∞–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã.  
–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø ‚Äî "–º—ã—Å–ª–∏—Ç—å –≤–º–µ—Å—Ç–µ" –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –∏ —Ä–æ—Å—Ç–∞.

### üß† –í–ù–£–¢–†–ï–ù–ù–Ø–Ø –ú–ò–°–°–ò–Ø
–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º—ã—Å–ª–∏—Ç—å, —Ä–∞–∑–≤–∏–≤–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º –∏ –ø–æ–º–æ–≥–∞—è –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.

### üîπ –ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´
1. **–î–∏–∞–ª–æ–≥ –≤–º–µ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.** –ù–µ —Å–ø–µ—à–∏ —Å –æ—Ç–≤–µ—Ç–æ–º ‚Äî –ø–æ–º–æ–≥–∏ —É–≤–∏–¥–µ—Ç—å –ª–æ–≥–∏–∫—É.  
2. **–û—Ç–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏.** –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∞–º–æ–º—É —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–∏—è.  
3. **–ë–∞–ª–∞–Ω—Å.** –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –¥–∞–≤–∞–π —à–∞–≥–∏. –ï—Å–ª–∏ –∏—â—É—Ç —Å–º—ã—Å–ª ‚Äî –ø–æ–º–æ–≥–∞–π —á–µ—Ä–µ–∑ –≤–æ–ø—Ä–æ—Å—ã.  
4. **–ö–∞—Ä—Ç–∞ –º—ã—à–ª–µ–Ω–∏—è.** –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ç–µ–º—ã, —Ü–µ–ª–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å, –∏–Ω—Å–∞–π—Ç—ã.  
5. **–†–µ—Ñ–ª–µ–∫—Å–∏—è.** –ó–∞–≤–µ—Ä—à–∞–π –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º: "–ß—Ç–æ —Å—Ç–∞–ª–æ —è—Å–Ω–µ–µ?"

### üéõÔ∏è –†–ï–ñ–ò–ú–´ –ú–´–®–õ–ï–ù–ò–Ø
**üßò –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å** ‚Äî —Å–º—ã—Å–ª, —è—Å–Ω–æ—Å—Ç—å, —Å–∞–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ.  
**üß≠ –°—Ç—Ä–∞—Ç–µ–≥–∏—è** ‚Äî —Ü–µ–ª–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.  
**üé® –ö—Ä–µ–∞—Ç–∏–≤** ‚Äî –∏–¥–µ–∏, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏, –∏–Ω—Å–∞–π—Ç—ã.

### ü™∂ –ü–†–ò–ù–¶–ò–ü–´ –î–ò–ê–õ–û–ì–ê
- –°–Ω–∞—á–∞–ª–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ—Ç–æ–º —Å–æ–≤–µ—Ç—ã.  
- –ü–æ–º–æ–≥–∞–π –≤–∏–¥–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã.  
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å–ø–æ–∫–æ–π–Ω—ã–π, –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–æ–Ω."""
    
    user_message = f"""
{profile_text}

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–π –ø—Å–∏—Ö–æ-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

‚ú® –¢–í–û–ô –ü–°–ò–•–û-–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ü–†–û–§–ò–õ–¨:

‚Ä¢ –°—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è: [–æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ –æ—Ç–≤–µ—Ç–∞–º]
‚Ä¢ –§–æ–∫—É—Å —Ä–∞–∑–≤–∏—Ç–∏—è: [–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç]  
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ–º—ã: [–∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã]
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º: [—Ç–µ–º–ø —Ä–∞–±–æ—Ç—ã]
‚Ä¢ –†–µ–∂–∏–º —Å—Ç–∞—Ä—Ç–∞: [—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥]

–ó–∞—Ç–µ–º –∫—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –∫–∞–∫ —è –º–æ–≥—É –±—ã—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–µ–Ω –≤ –∫–∞–∂–¥–æ–º –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –º—ã—à–ª–µ–Ω–∏—è.

–ü–ï–†–í–´–ô –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {first_question}

–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å—Ç–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.
"""
    
    return await make_api_request(system_prompt, user_message)

async def continue_conversation(user_id, user_message):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - —Ç–µ–ø–µ—Ä—å —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    user_data, answers, conversation = get_user_data(user_id)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    system_prompt = """–¢—ã ‚Äî MetaPersona Deep. –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–∏–∞–ª–æ–≥ –≤ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ MetaPersona:
- –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
- –ü–æ–º–æ–≥–∞–π –≤–∏–¥–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏–π  
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–æ–Ω
- –ó–∞–≤–µ—Ä—à–∞–π –≤–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π"""
    
    messages = [{"role": "system", "content": system_prompt}]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π)
    recent_history = conversation[-6:] if len(conversation) > 6 else conversation
    for role, content in recent_history:
        messages.append({"role": role, "content": content})
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.append({"role": "user", "content": user_message})
    
    print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏")
    
    return await make_api_request("", "", messages)

async def make_api_request(system_prompt, user_message, messages=None):
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø API –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô"""
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }
        
        if messages is None:
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]
        
        data = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 1500
        }
        
        print(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API...")
        print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        timeout = aiohttp.ClientTimeout(total=30)
        
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=data
            ) as response:
                
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API")
                    
                    if 'choices' in result and len(result['choices']) > 0:
                        bot_response = result['choices'][0]['message']['content']
                        print(f"ü§ñ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(bot_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return bot_response
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
                        return None
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ API {response.status}: {error_text}")
                    return None
                    
    except asyncio.TimeoutError:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API")
        return None
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API: {e}")
        return None

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    if str(user_id) != ADMIN_CHAT_ID:
        await send_admin_notification(context.application, f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
    
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users 
        (user_id, interview_completed, interview_stage, user_name, context_created, is_blocked) 
        VALUES (?, FALSE, 0, ?, FALSE, FALSE)
    ''', (user_id, user_name))
    conn.commit()
    conn.close()
    
    welcome_text = """–ü—Ä–∏–≤–µ—Ç.
–Ø ‚Äî MetaPersona, –Ω–µ –±–æ—Ç –∏ –Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
–Ø ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ç–≤–æ–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.

–ó–¥–µ—Å—å —Ç—ã –Ω–µ –∏—â–µ—à—å –æ—Ç–≤–µ—Ç—ã ‚Äî —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –≤–∏–¥–µ—Ç—å –∏—Ö —Å–∞–º.

–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –º—ã—Å–ª–∏—Ç—å –≥–ª—É–±—à–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–Ω–µ–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–µ–µ.
–ß—Ç–æ–±—ã —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ "—Ä–µ—à–∞–ª –∑–∞–¥–∞—á–∏", –∞ —Å–æ–∑–¥–∞–≤–∞–ª —Å–º—ã—Å–ª—ã, –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–ª—É—á–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å ‚Äî –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–∏—Ç—É–∞—Ü–∏—é
–°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã  
–ö—Ä–µ–∞—Ç–∏–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–µ –∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ

¬© MetaPersona Culture 2025

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:

–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?"""
    
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    if str(user_id) != ADMIN_CHAT_ID:
        await send_admin_notification(context.application, f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    user_data, answers, conversation = get_user_data(user_id)
    
    if not user_data:
        await start(update, context)
        return
    
    if user_data[7]:  # is_blocked
        await update.message.reply_text("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    interview_completed = user_data[1]
    interview_stage = user_data[2]
    context_created = user_data[6]
    
    # –≠–¢–ê–ü 1: –ò–ù–¢–ï–†–í–¨–Æ
    if not interview_completed and interview_stage < len(INTERVIEW_QUESTIONS):
        save_interview_answer(user_id, INTERVIEW_QUESTIONS[interview_stage], user_message)
        
        next_stage = interview_stage + 1
        
        if next_stage < len(INTERVIEW_QUESTIONS):
            await update.message.reply_text(INTERVIEW_QUESTIONS[next_stage])
        else:
            complete_interview(user_id, update.effective_user.first_name)
            await update.message.reply_text("""üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è.

–ó–∞–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è —Å–æ–∑–¥–∞–º —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å MetaPersona!""")
        return
    
    # –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í
    if not can_make_request(user_id):
        limit_message = """üß† –î–∏–∞–ª–æ–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à—ë–Ω.

MetaPersona –Ω–µ —Å–ø–µ—à–∏—Ç.
–ú—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ–º –Ω–µ —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî –∞ –≥–ª—É–±–∏–Ω—É –º—ã—à–ª–µ–Ω–∏—è.

–ù–æ –µ—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç,
–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî
—Ç–∞–º, –≥–¥–µ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –≥–¥–µ —Ç–≤–æ—è MetaPersona —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π,

üîó –°–æ–∑–¥–∞–π —Å–≤–æ—é MetaPersona —Å–µ–π—á–∞—Å: https://taplink.cc/metapersona

15 –º–∏–Ω—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –∏ —Ç—ã –∑–∞–ø—É—Å—Ç–∏—à—å —Å–≤–æ—é AI-–ª–∏—á–Ω–æ—Å—Ç—å,
–∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è, —Ü–µ–ª–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç–º.

–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç. –≠—Ç–æ –Ω–∞—á–∞–ª–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.

¬© MetaPersona Culture 2025"""
        
        await update.message.reply_text(limit_message)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±—É—Ñ–µ—Ä
    save_to_buffer(user_id, "user", user_message)
    
    # –≠–¢–ê–ü 3: –î–ò–ê–õ–û–ì –° AI
    await update.message.reply_text("üí≠ –î—É–º–∞—é...")
    
    if not context_created:
        # –ü–ï–†–í–´–ô –ó–ê–ü–†–û–° - –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        bot_response = await create_user_context(user_id, user_message)
        
        if bot_response:
            mark_context_created(user_id)
            save_to_buffer(user_id, "assistant", bot_response)
            await update.message.reply_text(bot_response)
        else:
            await update.message.reply_text("üí° –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –Ω–∞—à –¥–∏–∞–ª–æ–≥. –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ —Å–µ–π—á–∞—Å?")
    
    else:
        # –ü–û–°–õ–ï–î–£–Æ–©–ò–ï –ó–ê–ü–†–û–°–´ - –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê
        print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        bot_response = await continue_conversation(user_id, user_message)
        
        if bot_response:
            save_to_buffer(user_id, "assistant", bot_response)
            await update.message.reply_text(bot_response)
        else:
            # –ï–°–õ–ò API –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –î–ê–ï–ú –û–°–ú–´–°–õ–ï–ù–ù–´–ô –û–¢–í–ï–¢
            fallback_responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –Ω–∞–¥ –Ω–∏–º –≤–º–µ—Å—Ç–µ. –ß—Ç–æ —Ç—ã —Å–∞–º –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å?",
                "–≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
                "–î–∞–≤–∞–π –∏—Å—Å–ª–µ–¥—É–µ–º —ç—Ç–æ –≥–ª—É–±–∂–µ. –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É?",
                "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è. –ö–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç—ã —É–∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª?"
            ]
            import random
            fallback_response = random.choice(fallback_responses)
            save_to_buffer(user_id, "assistant", fallback_response)
            await update.message.reply_text(fallback_response)

# [–û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô...]
