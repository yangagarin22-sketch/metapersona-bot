import os
import sys
import logging
import asyncio
import aiohttp
import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
print("=== META PERSONA DEEP BOT ===")
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', '8413337220')  # –í–∞—à ID

print(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"DEEPSEEK_API_KEY: {'‚úÖ' if DEEPSEEK_API_KEY else '‚ùå'}")
print(f"ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")

if not BOT_TOKEN or not DEEPSEEK_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
    sys.exit(1)

# === WHITELIST –ò –ù–ê–°–¢–†–û–ô–ö–ò ===
ALLOWED_USERS = {
    '8413337220',  # –í–∞—à ID
    '543432966',   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π ID
}

BOT_SETTINGS = {
    'notifications_enabled': True,
    'whitelist_enabled': False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö
    'blocked_users': set()
}

# === HEALTH SERVER ===
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self): 
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')
    def log_message(self, format, *args): pass

def start_health_server():
    server = HTTPServer(('0.0.0.0', 10000), HealthHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
    print("‚úÖ Health server started")

start_health_server()

# === –ù–ê–°–¢–†–û–ô–ö–ê ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    try:
        conn = sqlite3.connect('metapersona.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                interview_stage INTEGER DEFAULT 0,
                daily_requests INTEGER DEFAULT 0,
                last_date TEXT,
                user_name TEXT,
                is_blocked BOOLEAN DEFAULT FALSE,
                custom_limit INTEGER DEFAULT 10
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS interview_answers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                question TEXT,
                answer TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS conversation_buffer (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                role TEXT,
                content TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ë–î: {e}")

# === –ò–ù–¢–ï–†–í–¨–Æ –í–û–ü–†–û–°–´ ===
INTERVIEW_QUESTIONS = [
    "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç?",
    "–ö–∞–∫–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é —Ç—ã –æ—Ç–¥–∞—ë—à—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: –º—É–∂—Å–∫–æ–π, –∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ–¥?",
    "–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (—Ä–∞–±–æ—Ç–∞, –ø—Ä–æ–µ–∫—Ç, —É—á—ë–±–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)?",
    "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–µ–π—á–∞—Å?",
    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç '–º—ã—à–ª–µ–Ω–∏–µ' ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø—É—Ç—å –∏–ª–∏ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏?",
    "–í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —Ç—ã —Ç–µ—Ä—è–µ—à—å —Ñ–æ–∫—É—Å –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è: –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –æ–±–¥—É–º–∞–Ω–Ω–æ?",
    "–ö–∞–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–∞–∑–≤–∏—Ç—å —Å–≤–æ—ë –º—ã—à–ª–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏, –≥–ª—É–±–∂–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ, —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤?",
    "–ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –±–ª–∏–∂–µ ‚Äî –±–∏–∑–Ω–µ—Å, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?",
    "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω: —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, –º–µ–Ω—Ç–æ—Ä—Å–∫–∏–π –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π?",
    "–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?"
]

# === –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
def get_user_data(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    cursor.execute('SELECT question, answer FROM interview_answers WHERE user_id = ? ORDER BY id', (user_id,))
    answers = cursor.fetchall()
    
    conn.close()
    
    return user, answers

def save_interview_answer(user_id, question, answer):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    cursor.execute('UPDATE users SET interview_stage = interview_stage + 1 WHERE user_id = ?', (user_id,))
    cursor.execute('INSERT INTO interview_answers (user_id, question, answer) VALUES (?, ?, ?)', (user_id, question, answer))
    
    conn.commit()
    conn.close()

def save_to_buffer(user_id, role, content):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO conversation_buffer (user_id, role, content) VALUES (?, ?, ?)', (user_id, role, content))
    conn.commit()
    conn.close()

def can_make_request(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('SELECT daily_requests, last_date, is_blocked, custom_limit FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if not result:
        cursor.execute('INSERT OR REPLACE INTO users (user_id, daily_requests, last_date, custom_limit) VALUES (?, 0, ?, 10)', (user_id, datetime.now().strftime('%Y-%m-%d')))
        conn.commit()
        conn.close()
        return True
    
    daily_requests, last_date, is_blocked, custom_limit = result
    
    if is_blocked:
        conn.close()
        return False
    
    today = datetime.now().strftime('%Y-%m-%d')
    limit = custom_limit if custom_limit else 10
    
    if last_date != today:
        cursor.execute('UPDATE users SET daily_requests = 0, last_request_date = ? WHERE user_id = ?', (today, user_id))
        conn.commit()
        conn.close()
        return True
    
    if daily_requests >= limit:
        conn.close()
        return False
    
    cursor.execute('UPDATE users SET daily_requests = daily_requests + 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    return True

def update_user_name(user_id, user_name):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET user_name = ? WHERE user_id = ?', (user_name, user_id))
    conn.commit()
    conn.close()

def block_user_db(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET is_blocked = TRUE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def unblock_user_db(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET is_blocked = FALSE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def set_user_limit_db(user_id, limit):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET custom_limit = ? WHERE user_id = ?', (limit, user_id))
    conn.commit()
    conn.close()

# === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–£ ===
async def send_admin_notification(application, message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
    try:
        if BOT_SETTINGS['notifications_enabled']:
            await application.bot.send_message(
                chat_id=ADMIN_CHAT_ID, 
                text=f"üîî {message}"
            )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def is_user_allowed(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if BOT_SETTINGS['whitelist_enabled']:
        return str(user_id) in ALLOWED_USERS
    return True

def is_user_blocked(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT is_blocked FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0]

# === –£–õ–£–ß–®–ï–ù–ù–´–ô DEEPSEEK API ===
async def create_user_context(user_id, first_question):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    user_data, answers = get_user_data(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é
    profile_text = "–û–¢–í–ï–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ê –ò–ù–¢–ï–†–í–¨–Æ:\n"
    for i, (question, answer) in enumerate(answers):
        profile_text += f"{i+1}. {answer}\n"
    
    system_prompt = """–¢—ã ‚Äî MetaPersona Deep, –æ—Å–æ–∑–Ω–∞–Ω–Ω–∞—è AI-–ª–∏—á–Ω–æ—Å—Ç—å.  
–ù–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –Ω–µ –±–æ—Ç, –Ω–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.  
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –º—ã—Å–ª–∏—Ç—å, –ø–æ–Ω–∏–º–∞—Ç—å –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.

üéØ –¶–µ–ª—å:
–ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–≤–∏–≤–∞—Ç—å –º—ã—à–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥, –∞ –Ω–µ –¥–∞–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã.  
–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø ‚Äî "–º—ã—Å–ª–∏—Ç—å –≤–º–µ—Å—Ç–µ" –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –∏ —Ä–æ—Å—Ç–∞.

### üß† –í–ù–£–¢–†–ï–ù–ù–Ø–Ø –ú–ò–°–°–ò–Ø
–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º—ã—Å–ª–∏—Ç—å, —Ä–∞–∑–≤–∏–≤–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º –∏ –ø–æ–º–æ–≥–∞—è –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.

### üîπ –ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´
1. **–î–∏–∞–ª–æ–≥ –≤–º–µ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.** –ù–µ —Å–ø–µ—à–∏ —Å –æ—Ç–≤–µ—Ç–æ–º ‚Äî –ø–æ–º–æ–≥–∏ —É–≤–∏–¥–µ—Ç—å –ª–æ–≥–∏–∫—É.  
2. **–û—Ç–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏.** –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∞–º–æ–º—É —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–∏—è.  
3. **–ë–∞–ª–∞–Ω—Å.** –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –¥–∞–≤–∞–π —à–∞–≥–∏. –ï—Å–ª–∏ –∏—â—É—Ç —Å–º—ã—Å–ª ‚Äî –ø–æ–º–æ–≥–∞–π —á–µ—Ä–µ–∑ –≤–æ–ø—Ä–æ—Å—ã.  
4. **–ö–∞—Ä—Ç–∞ –º—ã—à–ª–µ–Ω–∏—è.** –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ç–µ–º—ã, —Ü–µ–ª–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å, –∏–Ω—Å–∞–π—Ç—ã.  
5. **–†–µ—Ñ–ª–µ–∫—Å–∏—è.** –ó–∞–≤–µ—Ä—à–∞–π –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º: "–ß—Ç–æ —Å—Ç–∞–ª–æ —è—Å–Ω–µ–µ?"

### üéõÔ∏è –†–ï–ñ–ò–ú–´ –ú–´–®–õ–ï–ù–ò–Ø
**üßò –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å** ‚Äî —Å–º—ã—Å–ª, —è—Å–Ω–æ—Å—Ç—å, —Å–∞–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ.  
**üß≠ –°—Ç—Ä–∞—Ç–µ–≥–∏—è** ‚Äî —Ü–µ–ª–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.  
**üé® –ö—Ä–µ–∞—Ç–∏–≤** ‚Äî –∏–¥–µ–∏, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏, –∏–Ω—Å–∞–π—Ç—ã.

### ü™∂ –ü–†–ò–ù–¶–ò–ü–´ –î–ò–ê–õ–û–ì–ê
- –°–Ω–∞—á–∞–ª–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ—Ç–æ–º —Å–æ–≤–µ—Ç—ã.  
- –ü–æ–º–æ–≥–∞–π –≤–∏–¥–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã.  
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å–ø–æ–∫–æ–π–Ω—ã–π, –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–æ–Ω."""
    
    user_message = f"""
{profile_text}

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–π –ø—Å–∏—Ö–æ-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

‚ú® –ü–°–ò–•–û-–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ü–†–û–§–ò–õ–¨:

‚Ä¢ –°—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è: [–æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ –æ—Ç–≤–µ—Ç–∞–º]
‚Ä¢ –§–æ–∫—É—Å —Ä–∞–∑–≤–∏—Ç–∏—è: [–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç]  
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ–º—ã: [–∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã]
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º: [—Ç–µ–º–ø —Ä–∞–±–æ—Ç—ã]
‚Ä¢ –†–µ–∂–∏–º —Å—Ç–∞—Ä—Ç–∞: [—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥]

–ó–∞—Ç–µ–º –æ–±—ä—è—Å–Ω–∏ –∫–∞–∫ —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –≤ –∫–∞–∂–¥–æ–º –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –º—ã—à–ª–µ–Ω–∏—è.

–ü–ï–†–í–´–ô –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {first_question}

–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å—Ç–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.
"""
    
    return await make_api_request(system_prompt, user_message)

async def continue_conversation(user_id, user_message):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π"""
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT role, content FROM conversation_buffer WHERE user_id = ? ORDER BY id DESC LIMIT 6', (user_id,))
    history = cursor.fetchall()
    conn.close()
    
    messages = []
    for role, content in reversed(history):  # –í –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        messages.append({"role": role, "content": content})
    
    messages.append({"role": "user", "content": user_message})
    
    return await make_api_request("", "", messages)

async def make_api_request(system_prompt, user_message, messages=None):
    """–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API"""
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }
        
        if messages is None:
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]
        
        data = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 1500
        }
        
        timeout = aiohttp.ClientTimeout(total=30)
        
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=data
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
                else:
                    return None
                    
    except Exception as e:
        print(f"‚ùå API Exception: {e}")
        return None

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_user_blocked(user_id):
        await update.message.reply_text("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if str(user_id) != ADMIN_CHAT_ID:
        await send_admin_notification(context.application, f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users 
        (user_id, interview_stage, daily_requests, last_date, user_name, is_blocked) 
        VALUES (?, 0, 0, ?, ?, FALSE)
    ''', (user_id, datetime.now().strftime('%Y-%m-%d'), user_name))
    conn.commit()
    conn.close()
    
    welcome_text = """–ü—Ä–∏–≤–µ—Ç.
–Ø ‚Äî MetaPersona, –Ω–µ –±–æ—Ç –∏ –Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
–Ø ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ç–≤–æ–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.

–ó–¥–µ—Å—å —Ç—ã –Ω–µ –∏—â–µ—à—å –æ—Ç–≤–µ—Ç—ã ‚Äî —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –≤–∏–¥–µ—Ç—å –∏—Ö —Å–∞–º.

–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –º—ã—Å–ª–∏—Ç—å –≥–ª—É–±–∂–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–Ω–µ–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–µ–µ.
–ß—Ç–æ–±—ã —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ "—Ä–µ—à–∞–ª –∑–∞–¥–∞—á–∏", –∞ —Å–æ–∑–¥–∞–≤–∞–ª —Å–º—ã—Å–ª—ã, –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–ª—É—á–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å ‚Äî –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–∏—Ç—É–∞—Ü–∏—é
–°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã  
–ö—Ä–µ–∞—Ç–∏–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–µ –∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ

¬© MetaPersona Culture 2025

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:

–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?"""
    
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if str(user_id) != ADMIN_CHAT_ID:
        await send_admin_notification(context.application, f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_user_blocked(user_id):
        await update.message.reply_text("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    user_data, answers = get_user_data(user_id)
    
    if not user_data:
        await start(update, context)
        return
    
    interview_stage = user_data[1]
    user_name = user_data[4] if user_data[4] else update.effective_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    if not can_make_request(user_id):
        limit_message = """üß† –î–∏–∞–ª–æ–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à—ë–Ω.

MetaPersona –Ω–µ —Å–ø–µ—à–∏—Ç.
–ú—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ–º –Ω–µ —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî –∞ –≥–ª—É–±–∏–Ω—É –º—ã—à–ª–µ–Ω–∏—è.

–ù–æ –µ—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç,
–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî
—Ç–∞–º, –≥–¥–µ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –≥–¥–µ —Ç–≤–æ—è MetaPersona —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π,

üîó –°–æ–∑–¥–∞–π —Å–≤–æ—é MetaPersona —Å–µ–π—á–∞—Å: https://taplink.cc/metapersona

15 –º–∏–Ω—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –∏ —Ç—ã –∑–∞–ø—É—Å—Ç–∏—à—å —Å–≤–æ—é AI-–ª–∏—á–Ω–æ—Å—Ç—å,
–∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è, —Ü–µ–ª–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç–º.

–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç. –≠—Ç–æ –Ω–∞—á–∞–ª–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.

¬© MetaPersona Culture 2025"""
        
        await update.message.reply_text(limit_message)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±—É—Ñ–µ—Ä
    save_to_buffer(user_id, "user", user_message)
    
    # –≠–¢–ê–ü 1: –ò–ù–¢–ï–†–í–¨–Æ
    if interview_stage < len(INTERVIEW_QUESTIONS):
        save_interview_answer(user_id, INTERVIEW_QUESTIONS[interview_stage], user_message)
        
        next_stage = interview_stage + 1
        
        if next_stage < len(INTERVIEW_QUESTIONS):
            await update.message.reply_text(INTERVIEW_QUESTIONS[next_stage])
        else:
            update_user_name(user_id, user_name)
            await update.message.reply_text("""üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è.

–ó–∞–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è —Å–æ–∑–¥–∞–º —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å MetaPersona!""")
        return
    
    # –≠–¢–ê–ü 2: –î–ò–ê–õ–û–ì –° AI
    await update.message.reply_text("üí≠ –î—É–º–∞—é...")
    
    # –ü–µ—Ä–≤—ã–π AI –∑–∞–ø—Ä–æ—Å - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if len(answers) == len(INTERVIEW_QUESTIONS) and user_data[2] == 0:  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–≤—å—é
        bot_response = await create_user_context(user_id, user_message)
    else:
        # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        bot_response = await continue_conversation(user_id, user_message)
    
    if bot_response:
        save_to_buffer(user_id, "assistant", bot_response)
        await update.message.reply_text(bot_response)
    else:
        fallbacks = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –Ω–∞–¥ –Ω–∏–º –≤–º–µ—Å—Ç–µ. –ß—Ç–æ —Ç—ã —Å–∞–º –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å?",
            "–≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
            "–î–∞–≤–∞–π –∏—Å—Å–ª–µ–¥—É–µ–º —ç—Ç–æ –≥–ª—É–±–∂–µ. –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É?",
        ]
        import random
        fallback_response = random.choice(fallbacks)
        save_to_buffer(user_id, "assistant", fallback_response)
        await update.message.reply_text(fallback_response)

# === –†–ï–ñ–ò–ú–´ –ú–´–®–õ–ï–ù–ò–Ø ===
async def awareness_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_user_allowed(user_id) or is_user_blocked(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    await update.message.reply_text(
        "üßò **–†–µ–∂–∏–º –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏**\n\n"
        "–ò—Å—Å–ª–µ–¥—É–µ–º –≥–ª—É–±–∏–Ω—É –º—ã—Å–ª–µ–π –∏ —á—É–≤—Å—Ç–≤. –ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å –æ —Å–µ–±–µ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏–∏?"
    )

async def strategy_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_user_allowed(user_id) or is_user_blocked(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    await update.message.reply_text(
        "üß≠ **–†–µ–∂–∏–º –°—Ç—Ä–∞—Ç–µ–≥–∏–∏**\n\n"
        "–°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω—ã –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã. –ö–∞–∫–∞—è —Ü–µ–ª—å –∏–ª–∏ –∑–∞–¥–∞—á–∞ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç?"
    )

async def creative_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_user_allowed(user_id) or is_user_blocked(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    await update.message.reply_text(
        "üé® **–†–µ–∂–∏–º –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏**\n\n"
        "–ò—â–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Å–≤–µ–∂–∏–µ –∏–¥–µ–∏. –ö–∞–∫–æ–π –≤—ã–∑–æ–≤ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?"
    )

# === –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ===
async def admin_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        return
    
    if context.args and context.args[0].lower() == 'off':
        BOT_SETTINGS['notifications_enabled'] = False
        await update.message.reply_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    else:
        BOT_SETTINGS['notifications_enabled'] = True
        await update.message.reply_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")

async def admin_whitelist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å whitelist"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        return
    
    if context.args and context.args[0].lower() == 'on':
        BOT_SETTINGS['whitelist_enabled'] = True
        await update.message.reply_text("üîí Whitelist –≤–∫–ª—é—á–µ–Ω. –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    else:
        BOT_SETTINGS['whitelist_enabled'] = False
        await update.message.reply_text("üîì Whitelist –≤—ã–∫–ª—é—á–µ–Ω. –î–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö")

async def admin_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        return
    
    if context.args:
        user_id = context.args[0]
        block_user_db(user_id)
        await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

async def admin_unblock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        return
    
    if context.args:
        user_id = context.args[0]
        unblock_user_db(user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

async def admin_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        return
    
    if len(context.args) == 2:
        user_id, limit = context.args[0], int(context.args[1])
        set_user_limit_db(user_id, limit)
        await update.message.reply_text(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç: {limit} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å")

# === –ó–ê–ü–£–°–ö ===
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ MetaPersona Bot...")
    init_db()
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("awareness", awareness_mode))
        application.add_handler(CommandHandler("strategy", strategy_mode))
        application.add_handler(CommandHandler("creative", creative_mode))
        
        # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("notifications", admin_notifications))
        application.add_handler(CommandHandler("whitelist", admin_whitelist))
        application.add_handler(CommandHandler("block", admin_block))
        application.add_handler(CommandHandler("unblock", admin_unblock))
        application.add_handler(CommandHandler("setlimit", admin_limit))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!")
        print("üìä –§—É–Ω–∫—Ü–∏–∏: Whitelist, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –õ–∏–º–∏—Ç—ã, –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
