import os
import sys
import logging
import asyncio
import aiohttp
import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
print("=== META PERSONA BOT ===")
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')

print(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"DEEPSEEK_API_KEY: {'‚úÖ' if DEEPSEEK_API_KEY else '‚ùå'}")

if not BOT_TOKEN or not DEEPSEEK_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
    sys.exit(1)

# === HEALTH SERVER ===
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self): 
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')
    def log_message(self, format, *args): pass

def start_health_server():
    server = HTTPServer(('0.0.0.0', 10000), HealthHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
    print("‚úÖ Health server started")

start_health_server()

# === –ü–†–û–°–¢–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_simple_db():
    try:
        conn = sqlite3.connect('metapersona.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –¢–æ–ª—å–∫–æ —Å–∞–º–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                interview_stage INTEGER DEFAULT 0,
                daily_requests INTEGER DEFAULT 0,
                last_date TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ë–î

# === –ò–ù–¢–ï–†–í–¨–Æ –í–û–ü–†–û–°–´ ===
INTERVIEW_QUESTIONS = [
    "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç?",
    "–ö–∞–∫–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é —Ç—ã –æ—Ç–¥–∞—ë—à—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: –º—É–∂—Å–∫–æ–π, –∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ–¥?",
    "–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (—Ä–∞–±–æ—Ç–∞, –ø—Ä–æ–µ–∫—Ç, —É—á—ë–±–∞)?",
    "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–µ–π—á–∞—Å?",
    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç '–º—ã—à–ª–µ–Ω–∏–µ' ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø—É—Ç—å –∏–ª–∏ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏?",
    "–í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —Ç—ã —Ç–µ—Ä—è–µ—à—å —Ñ–æ–∫—É—Å –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è: –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –æ–±–¥—É–º–∞–Ω–Ω–æ?",
    "–ö–∞–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–∞–∑–≤–∏—Ç—å —Å–≤–æ—ë –º—ã—à–ª–µ–Ω–∏–µ?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤?",
    "–ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –±–ª–∏–∂–µ ‚Äî –±–∏–∑–Ω–µ—Å, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?",
    "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω?",
    "–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?"
]

# === –ü–†–û–°–¢–û–ô DEEPSEEK API ===
async def simple_deepseek_request(user_message):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API"""
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }
        
        system_prompt = "–¢—ã ‚Äî MetaPersona, –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à–ª–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        
        data = {
            "model": "deepseek-chat",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            "temperature": 0.7,
            "max_tokens": 800
        }
        
        timeout = aiohttp.ClientTimeout(total=20)
        
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=data
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
                else:
                    return "–î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º –≤–º–µ—Å—Ç–µ. –ß—Ç–æ —Ç—ã —Å–∞–º –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å?"
                    
    except Exception:
        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –µ–≥–æ."

# === –ü–†–û–°–¢–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
user_states = {}  # –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = {
        'interview_stage': 0,
        'interview_completed': False,
        'daily_requests': 0,
        'last_date': datetime.now().strftime('%Y-%m-%d')
    }
    
    welcome_text = """–ü—Ä–∏–≤–µ—Ç.
–Ø ‚Äî MetaPersona, –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ç–≤–æ–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.

–ó–¥–µ—Å—å —Ç—ã –Ω–µ –∏—â–µ—à—å –æ—Ç–≤–µ—Ç—ã ‚Äî —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –≤–∏–¥–µ—Ç—å –∏—Ö —Å–∞–º.

–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –º—ã—Å–ª–∏—Ç—å –≥–ª—É–±–∂–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–Ω–µ–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–µ–µ.

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:

–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?"""
    
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in user_states:
        user_states[user_id] = {
            'interview_stage': 0,
            'interview_completed': False, 
            'daily_requests': 0,
            'last_date': datetime.now().strftime('%Y-%m-%d')
        }
    
    state = user_states[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    today = datetime.now().strftime('%Y-%m-%d')
    if state['last_date'] != today:
        state['daily_requests'] = 0
        state['last_date'] = today
    
    if state['daily_requests'] >= 10:
        await update.message.reply_text(
            "üß† –ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –õ–∏–º–∏—Ç: 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\n\n"
            "–•–æ—á–µ—à—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø? üîó https://taplink.cc/metapersona"
        )
        return
    
    # –≠–¢–ê–ü 1: –ò–ù–¢–ï–†–í–¨–Æ
    if not state['interview_completed'] and state['interview_stage'] < len(INTERVIEW_QUESTIONS):
        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        state['interview_stage'] += 1
        
        if state['interview_stage'] < len(INTERVIEW_QUESTIONS):
            await update.message.reply_text(INTERVIEW_QUESTIONS[state['interview_stage']])
        else:
            state['interview_completed'] = True
            await update.message.reply_text(
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è.\n\n"
                "–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –º—ã—Å–ª–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ!"
            )
        return
    
    # –≠–¢–ê–ü 2: –î–ò–ê–õ–û–ì –° AI
    state['daily_requests'] += 1
    
    await update.message.reply_text("üí≠ –î—É–º–∞—é...")
    
    bot_response = await simple_deepseek_request(user_message)
    await update.message.reply_text(bot_response)

# === –†–ï–ñ–ò–ú–´ –ú–´–®–õ–ï–ù–ò–Ø ===
async def awareness_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üßò **–†–µ–∂–∏–º –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏**\n\n"
        "–ò—Å—Å–ª–µ–¥—É–µ–º –≥–ª—É–±–∏–Ω—É –º—ã—Å–ª–µ–π –∏ —á—É–≤—Å—Ç–≤. –ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å?"
    )

async def strategy_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üß≠ **–†–µ–∂–∏–º –°—Ç—Ä–∞—Ç–µ–≥–∏–∏**\n\n"
        "–°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω—ã –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã. –ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞?"
    )

async def creative_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé® **–†–µ–∂–∏–º –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏**\n\n"
        "–ò—â–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –ö–∞–∫–æ–π –≤—ã–∑–æ–≤?"
    )

# === –ó–ê–ü–£–°–ö ===
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ MetaPersona Bot...")
    
    # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ —Å–ª–æ–º–∞–µ—Ç—Å—è)
    init_simple_db()
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("awareness", awareness_mode))
        application.add_handler(CommandHandler("strategy", strategy_mode))
        application.add_handler(CommandHandler("creative", creative_mode))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            close_loop=False
        )
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        import time
        time.sleep(5)
        main()

if __name__ == '__main__':
    main()
