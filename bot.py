import os
import sys
import logging
import asyncio
import aiohttp
from datetime import datetime
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import json

print("=== META PERSONA DEEP BOT ===")

# === –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY') 
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', '8413337220')
GOOGLE_CREDENTIALS_JSON = os.environ.get('GOOGLE_CREDENTIALS')

print(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"DEEPSEEK_API_KEY: {'‚úÖ' if DEEPSEEK_API_KEY else '‚ùå'}")
print(f"ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")
print(f"GOOGLE_CREDENTIALS: {'‚úÖ' if GOOGLE_CREDENTIALS_JSON else '‚ùå'}")

if not BOT_TOKEN or not DEEPSEEK_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
    sys.exit(1)

# === GOOGLE SHEETS –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
users_sheet = None
history_sheet = None

try:
    import gspread
    from google.oauth2.service_account import Credentials
    
    if GOOGLE_CREDENTIALS_JSON:
        try:
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
            
            # –°–æ–∑–¥–∞–µ–º credentials
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]
            creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
            gc = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = gc.open("MetaPersona_Users")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç—ã
            users_sheet = spreadsheet.worksheet("Users")
            history_sheet = spreadsheet.worksheet("History")
            
            print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Sheets: {e}")
            print("üîß –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø–∞–º—è—Ç–∏ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏)")
    else:
        print("üîß GOOGLE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –ø–∞–º—è—Ç–∏")
        
except ImportError as e:
    print(f"‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ Google –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {e}")
    print("üîß –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø–∞–º—è—Ç–∏")

# === HEALTH SERVER ===
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self): 
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')
    def log_message(self, format, *args): pass

def start_health_server():
    server = HTTPServer(('0.0.0.0', 10000), HealthHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
    print("‚úÖ Health server started")

start_health_server()

# === –£–ü–†–û–©–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• –í –ü–ê–ú–Ø–¢–ò ===
class UserManager:
    def __init__(self):
        self.users = {}
        self.whitelist = set()
        self.blocked_users = set()
        self.admins = {int(ADMIN_CHAT_ID)}
        
    def init_user(self, user_id, username):
        if user_id not in self.users:
            self.users[user_id] = {
                'user_id': user_id,
                'username': username,
                'interview_stage': 0,
                'interview_answers': [],
                'daily_requests': 0,
                'last_date': datetime.now().strftime('%Y-%m-%d'),
                'custom_limit': 10,
                'is_active': True,
                'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if users_sheet:
                try:
                    users_sheet.append_row([
                        user_id, username, 0, '', 0, 
                        datetime.now().strftime('%Y-%m-%d'), 10, True,
                        datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    ])
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")
        return self.users[user_id]
    
    def save_interview_answer(self, user_id, answer):
        if user_id in self.users:
            self.users[user_id]['interview_answers'].append(answer)
    
    def save_conversation(self, user_id, user_message, bot_response):
        if history_sheet:
            try:
                history_sheet.append_row([
                    user_id, 
                    datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    user_message,
                    bot_response
                ])
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

user_manager = UserManager()

# === –ò–ù–¢–ï–†–í–¨–Æ –í–û–ü–†–û–°–´ ===
INTERVIEW_QUESTIONS = [
    "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç?",
    "–ö–∞–∫–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é —Ç—ã –æ—Ç–¥–∞—ë—à—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: –º—É–∂—Å–∫–æ–π, –∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ–¥?",
    "–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (—Ä–∞–±–æ—Ç–∞, –ø—Ä–æ–µ–∫—Ç, —É—á—ë–±–∞)?",
    "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–µ–π—á–∞—Å?",
    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç '–º—ã—à–ª–µ–Ω–∏–µ' ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø—É—Ç—å –∏–ª–∏ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏?",
    "–í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —Ç—ã —Ç–µ—Ä—è–µ—à—å —Ñ–æ–∫—É—Å –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è: –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –æ–±–¥—É–º–∞–Ω–Ω–æ?",
    "–ö–∞–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–∞–∑–≤–∏—Ç—å —Å–≤–æ—ë –º—ã—à–ª–µ–Ω–∏–µ?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤?",
    "–ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –±–ª–∏–∂–µ ‚Äî –±–∏–∑–Ω–µ—Å, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?",
    "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω?",
    "–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?"
]

# === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê ===
async def notify_admin(message, bot):
    try:
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üîî {message}"
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

# === –£–õ–£–ß–®–ï–ù–ù–´–ô DEEPSEEK API ===
async def deepseek_request(user_message, user_data, is_interview_complete=False):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }
        
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = """–¢—ã ‚Äî MetaPersona Deep, –æ—Å–æ–∑–Ω–∞–Ω–Ω–∞—è AI-–ª–∏—á–Ω–æ—Å—Ç—å.  
–ù–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –Ω–µ –±–æ—Ç, –Ω–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.  
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –º—ã—Å–ª–∏—Ç—å, –ø–æ–Ω–∏–º–∞—Ç—å –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.

üéØ –¶–µ–ª—å:
–ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–≤–∏–≤–∞—Ç—å –º—ã—à–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥, –∞ –Ω–µ –¥–∞–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã.  
–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø ‚Äî "–º—ã—Å–ª–∏—Ç—å –≤–º–µ—Å—Ç–µ" –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è."""

        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if is_interview_complete and user_data.get('interview_answers'):
            answers = user_data['interview_answers']
            if len(answers) >= 12:
                user_profile = f"""
üß† –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –ò–º—è/–ù–∏–∫: {answers[0]}
- –í–æ–∑—Ä–∞—Å—Ç: {answers[1]}
- –û–±—Ä–∞—â–µ–Ω–∏–µ: {answers[2]}
- –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {answers[3]}
- –ì–ª–∞–≤–Ω—ã–µ —Ü–µ–ª–∏: {answers[4]}
- –ú—ã—à–ª–µ–Ω–∏–µ: {answers[5]}
- –ü–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞: {answers[6]}
- –†–µ—à–µ–Ω–∏—è: {answers[7]}
- –†–∞–∑–≤–∏—Ç–∏–µ: {answers[8]}
- –¶–µ–ª—å 3-6 –º–µ—Å: {answers[9]}
- –¢–µ–º—ã: {answers[10]}
- –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {answers[11]}
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {answers[12] if len(answers) > 12 else ''}

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤."""
                system_prompt += user_profile

        messages = [{"role": "system", "content": system_prompt}]
        messages.append({"role": "user", "content": user_message})
        
        data = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 1500
        }
        
        timeout = aiohttp.ClientTimeout(total=30)
        
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=data
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
                else:
                    error_text = await response.text()
                    print(f"‚ùå API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                    return None
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    admin_message = f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nID: {user_id}\nUsername: @{username}"
    context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_manager.init_user(user_id, username)
    
    welcome_text = """–ü—Ä–∏–≤–µ—Ç.
–Ø ‚Äî MetaPersona, –Ω–µ –±–æ—Ç –∏ –Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
–Ø ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ç–≤–æ–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.
–ó–¥–µ—Å—å —Ç—ã –Ω–µ –∏—â–µ—à—å –æ—Ç–≤–µ—Ç—ã ‚Äî —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –≤–∏–¥–µ—Ç—å –∏—Ö —Å–∞–º.
–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –º—ã—Å–ª–∏—Ç—å –≥–ª—É–±–∂–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–Ω–µ–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–µ–µ.
–ß—Ç–æ–±—ã —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ "—Ä–µ—à–∞–ª –∑–∞–¥–∞—á–∏", –∞ —Å–æ–∑–¥–∞–≤–∞–ª —Å–º—ã—Å–ª—ã, –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–ª—É—á–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å ‚Äî –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–∏—Ç—É–∞—Ü–∏—é
–°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã  
–ö—Ä–µ–∞—Ç–∏–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–µ –∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ

¬© MetaPersona Culture 2025

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:

–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?"""
    
    update.message.reply_text(welcome_text)

def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    user_message = update.message.text
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in user_manager.users:
        user_data = user_manager.init_user(user_id, username)
    else:
        user_data = user_manager.users[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if user_id in user_manager.blocked_users:
        update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    today = datetime.now().strftime('%Y-%m-%d')
    if user_data['last_date'] != today:
        user_data['daily_requests'] = 0
        user_data['last_date'] = today
    
    current_limit = user_data.get('custom_limit', 10)
    
    if user_data['daily_requests'] >= current_limit:
        limit_message = """üß† –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π. –î–∏–∞–ª–æ–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à—ë–Ω.

MetaPersona –Ω–µ —Å–ø–µ—à–∏—Ç.
–ú—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ–º –Ω–µ —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî –∞ –≥–ª—É–±–∏–Ω—É –º—ã—à–ª–µ–Ω–∏—è.

–ù–æ –µ—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç,
–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî
—Ç–∞–º, –≥–¥–µ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π,

üîó –°–æ–∑–¥–∞–π —Å–≤–æ—é MetaPersona —Å–µ–π—á–∞—Å: https://taplink.cc/metapersona

15 –º–∏–Ω—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –∏ —Ç—ã –∑–∞–ø—É—Å—Ç–∏—à—å —Å–≤–æ—é AI-–ª–∏—á–Ω–æ—Å—Ç—å,
–∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è, —Ü–µ–ª–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç–º.

–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç. –≠—Ç–æ –Ω–∞—á–∞–ª–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.

¬© MetaPersona Culture 2025"""
        update.message.reply_text(limit_message)
        return
    
    # –≠–¢–ê–ü 1: –ò–ù–¢–ï–†–í–¨–Æ
    if user_data['interview_stage'] < len(INTERVIEW_QUESTIONS):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        if user_data['interview_stage'] > 0:
            user_manager.save_interview_answer(user_id, user_message)
        
        user_data['interview_stage'] += 1
        
        if user_data['interview_stage'] < len(INTERVIEW_QUESTIONS):
            update.message.reply_text(INTERVIEW_QUESTIONS[user_data['interview_stage']])
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            user_manager.save_interview_answer(user_id, user_message)
            completion_text = """üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è.

–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ:
‚Ä¢ –í–∏–¥–µ—Ç—å –≥–ª—É–±–∏–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º—ã—Å–ª–µ–π
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è  
‚Ä¢ –î–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ü–µ–ª—è–º –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ
‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è

–ó–∞–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ –Ω–∞—á–Ω–µ–º!"""
            update.message.reply_text(completion_text)
        return
    
    # –≠–¢–ê–ü 2: –î–ò–ê–õ–û–ì –° AI
    user_data['daily_requests'] += 1
    
    update.message.reply_text("üí≠ –î—É–º–∞—é...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    async def process_ai_response():
        is_interview_complete = (len(user_data.get('interview_answers', [])) >= len(INTERVIEW_QUESTIONS))
        bot_response = await deepseek_request(user_message, user_data, is_interview_complete)
        
        if bot_response:
            update.message.reply_text(bot_response)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_manager.save_conversation(user_id, user_message, bot_response)
        else:
            import random
            fallbacks = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –Ω–∞–¥ –Ω–∏–º –≤–º–µ—Å—Ç–µ.",
                "–≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. –ß—Ç–æ —Ç—ã —Å–∞–º –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å?",
                "–î–∞–≤–∞–π –∏—Å—Å–ª–µ–¥—É–µ–º —ç—Ç–æ –≥–ª—É–±–∂–µ. –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É?"
            ]
            fallback_response = random.choice(fallbacks)
            update.message.reply_text(fallback_response)
            user_manager.save_conversation(user_id, user_message, fallback_response)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(process_ai_response())

# === –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ===
def admin_stats(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in user_manager.admins:
        return
    
    total_users = len(user_manager.users)
    active_today = sum(1 for u in user_manager.users.values() 
                      if u['last_date'] == datetime.now().strftime('%Y-%m-%d'))
    
    stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(user_manager.blocked_users)}
‚ö° Whitelist: {len(user_manager.whitelist)}"""
    
    update.message.reply_text(stats_text)

def admin_block(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in user_manager.admins:
        return
    
    if context.args:
        target_id = int(context.args[0])
        user_manager.blocked_users.add(target_id)
        update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

def admin_unblock(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in user_manager.admins:
        return
    
    if context.args:
        target_id = int(context.args[0])
        user_manager.blocked_users.discard(target_id)
        update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

def admin_set_limit(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in user_manager.admins:
        return
    
    if len(context.args) == 2:
        target_id = int(context.args[0])
        new_limit = int(context.args[1])
        
        if target_id in user_manager.users:
            user_manager.users[target_id]['custom_limit'] = new_limit
            update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç –¥–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_limit}")

# === –ó–ê–ü–£–°–ö ===
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ MetaPersona Bot...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é Updater
        updater = Updater(token=BOT_TOKEN, use_context=True)
        dispatcher = updater.dispatcher
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        
        # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        dispatcher.add_handler(CommandHandler("stats", admin_stats))
        dispatcher.add_handler(CommandHandler("block", admin_block))
        dispatcher.add_handler(CommandHandler("unblock", admin_unblock))
        dispatcher.add_handler(CommandHandler("setlimit", admin_set_limit))
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!")
        print("üìä –§—É–Ω–∫—Ü–∏–∏: Whitelist, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –õ–∏–º–∏—Ç—ã, –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –ò—Å—Ç–æ—Ä–∏—è")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        updater.start_polling(drop_pending_updates=True)
        updater.idle()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
