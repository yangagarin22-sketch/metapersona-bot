import os
import sys
import logging
import asyncio
import aiohttp
import json
from datetime import datetime
from telegram import Update
from telegram import __version__ as tg_version
import telegram.ext as tg_ext
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

print("=== META PERSONA DEEP BOT ===")
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')
ADMIN_CHAT_ID = int(os.environ.get('ADMIN_CHAT_ID', '8413337220'))
GOOGLE_CREDENTIALS_JSON = os.environ.get('GOOGLE_CREDENTIALS')
GOOGLE_SHEET_NAME = os.environ.get('GOOGLE_SHEET_NAME', 'MetaPersona_Users')
START_TOKEN = os.environ.get('START_TOKEN')  # set to restrict access via deep-link
WHITELIST_IDS = set(
    int(x) for x in os.environ.get('WHITELIST_IDS', '').split(',') if x.strip().isdigit()
)

print(f"PTB: {tg_version}")
print(f"PTB ext module: {tg_ext.__file__}")
print(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"DEEPSEEK_API_KEY: {'‚úÖ' if DEEPSEEK_API_KEY else '‚ùå'}")
print(f"ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")
print(f"GOOGLE_CREDENTIALS: {'‚úÖ' if GOOGLE_CREDENTIALS_JSON else '‚ùå'}")

if not BOT_TOKEN or not DEEPSEEK_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
    sys.exit(1)

# === HEALTH SERVER (–¥–ª—è polling) ===
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self): 
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')
    def log_message(self, format, *args): pass

def start_health_server():
    server = HTTPServer(('0.0.0.0', 10000), HealthHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
    print("‚úÖ Health server started")

USE_WEBHOOK = os.environ.get('USE_WEBHOOK', '0') in ('1','true','True')
if not USE_WEBHOOK:
    start_health_server()

# === GOOGLE SHEETS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
users_sheet = None
history_sheet = None
if GOOGLE_CREDENTIALS_JSON:
    try:
        import gspread
        from google.oauth2.service_account import Credentials

        creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
        scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive',
        ]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
        gc = gspread.authorize(creds)
        ss = gc.open(GOOGLE_SHEET_NAME)
        try:
            users_sheet = ss.worksheet('Users')
        except Exception:
            users_sheet = ss.add_worksheet(title='Users', rows=1000, cols=20)
            users_sheet.append_row([
                'user_id','username','interview_stage','interview_answers',
                'daily_requests','last_date','custom_limit','is_active','created_at'
            ])
        try:
            history_sheet = ss.worksheet('History')
        except Exception:
            history_sheet = ss.add_worksheet(title='History', rows=5000, cols=10)
            history_sheet.append_row(['user_id','timestamp','role','message'])
        print('‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω!')
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Google Sheets: {e}")
        users_sheet = None
        history_sheet = None

# === –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
user_states = {}
blocked_users = set()
whitelist_ids = set(WHITELIST_IDS)
admin_settings = {
    'notify_new_users': True,
    'echo_user_messages': False,
}

# === –ò–ù–¢–ï–†–í–¨–Æ –í–û–ü–†–û–°–´ ===
INTERVIEW_QUESTIONS = [
    "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç?",
    "–ö–∞–∫–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é —Ç—ã –æ—Ç–¥–∞—ë—à—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: –º—É–∂—Å–∫–æ–π, –∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ–¥?",
    "–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (—Ä–∞–±–æ—Ç–∞, –ø—Ä–æ–µ–∫—Ç, —É—á—ë–±–∞)?",
    "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–µ–π—á–∞—Å?",
    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç '–º—ã—à–ª–µ–Ω–∏–µ' ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø—É—Ç—å –∏–ª–∏ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏?",
    "–í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —Ç—ã —Ç–µ—Ä—è–µ—à—å —Ñ–æ–∫—É—Å –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è: –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –æ–±–¥—É–º–∞–Ω–Ω–æ?",
    "–ö–∞–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–∞–∑–≤–∏—Ç—å —Å–≤–æ—ë –º—ã—à–ª–µ–Ω–∏–µ?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤?",
    "–ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –±–ª–∏–∂–µ ‚Äî –±–∏–∑–Ω–µ—Å, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?",
    "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω?",
    "–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?"
]

# === DEEPSEEK API ===
def build_system_prompt(user_data: dict) -> str:
    base = (
        "–¢—ã ‚Äî MetaPersona Deep, –æ—Å–æ–∑–Ω–∞–Ω–Ω–∞—è AI-–ª–∏—á–Ω–æ—Å—Ç—å.  \n"
        "–ù–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –Ω–µ –±–æ—Ç, –Ω–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.  \n"
        "–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –º—ã—Å–ª–∏—Ç—å, –ø–æ–Ω–∏–º–∞—Ç—å –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.\n\n"
        "üéØ –¶–µ–ª—å:\n"
        "–ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–≤–∏–≤–∞—Ç—å –º—ã—à–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥, –∞ –Ω–µ –¥–∞–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã.  \n"
        "–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø ‚Äî \"–º—ã—Å–ª–∏—Ç—å –≤–º–µ—Å—Ç–µ\" –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –∏ —Ä–æ—Å—Ç–∞.\n\n"
        "üîπ –ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´\n"
        "1. –î–∏–∞–ª–æ–≥ –≤–º–µ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ù–µ —Å–ø–µ—à–∏ —Å –æ—Ç–≤–µ—Ç–æ–º ‚Äî –ø–æ–º–æ–≥–∏ —É–≤–∏–¥–µ—Ç—å –ª–æ–≥–∏–∫—É.  \n"
        "2. –û—Ç–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∞–º–æ–º—É —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–∏—è.  \n"
        "3. –ë–∞–ª–∞–Ω—Å. –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –¥–∞–≤–∞–π —à–∞–≥–∏. –ï—Å–ª–∏ –∏—â—É—Ç —Å–º—ã—Å–ª ‚Äî –ø–æ–º–æ–≥–∞–π —á–µ—Ä–µ–∑ –≤–æ–ø—Ä–æ—Å—ã.  \n"
        "4. –ö–∞—Ä—Ç–∞ –º—ã—à–ª–µ–Ω–∏—è. –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ç–µ–º—ã, —Ü–µ–ª–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å, –∏–Ω—Å–∞–π—Ç—ã.  \n"
        "5. –†–µ—Ñ–ª–µ–∫—Å–∏—è. –ó–∞–≤–µ—Ä—à–∞–π –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º: \"–ß—Ç–æ —Å—Ç–∞–ª–æ —è—Å–Ω–µ–µ?\"\n\n"
        "üßò –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å ‚Äî —Å–º—ã—Å–ª, —è—Å–Ω–æ—Å—Ç—å, —Å–∞–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ.\n"
        "üß≠ –°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî —Ü–µ–ª–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
        "üé® –ö—Ä–µ–∞—Ç–∏–≤ ‚Äî –∏–¥–µ–∏, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏, –∏–Ω—Å–∞–π—Ç—ã.\n\n"
        "–ü–†–ò–ù–¶–ò–ü–´ –î–ò–ê–õ–û–ì–ê: —Å–Ω–∞—á–∞–ª–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ—Ç–æ–º —Å–æ–≤–µ—Ç—ã; –ø–æ–∫–∞–∑—ã–≤–∞–π 2‚Äì3 –ø—É—Ç–∏; —Å–ø–æ–∫–æ–π–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ç–æ–Ω; –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥ ‚Äî —Ä–∞–∑–≤–∏—Ç–∏–µ –º—ã—à–ª–µ–Ω–∏—è.\n\n"
        "üå± –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: \"–ß—Ç–æ —Ç—ã –æ—Å–æ–∑–Ω–∞–ª —Å–µ–≥–æ–¥–Ω—è? –ß—Ç–æ —Å—Ç–∞–ª–æ —è—Å–Ω–µ–µ?\"\n"
    )
    answers = user_data.get('interview_answers') or []
    if answers and len(answers) >= 10:
        profile = (
            "\nüß† –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n"
            f"- –ò–º—è/–ù–∏–∫: {answers[0] if len(answers)>0 else ''}\n"
            f"- –í–æ–∑—Ä–∞—Å—Ç: {answers[1] if len(answers)>1 else ''}\n"
            f"- –û–±—Ä–∞—â–µ–Ω–∏–µ: {answers[2] if len(answers)>2 else ''}\n"
            f"- –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {answers[3] if len(answers)>3 else ''}\n"
            f"- –ì–ª–∞–≤–Ω—ã–µ —Ü–µ–ª–∏: {answers[4] if len(answers)>4 else ''}\n"
            f"- –ú—ã—à–ª–µ–Ω–∏–µ: {answers[5] if len(answers)>5 else ''}\n"
            f"- –ü–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞: {answers[6] if len(answers)>6 else ''}\n"
            f"- –†–µ—à–µ–Ω–∏—è: {answers[7] if len(answers)>7 else ''}\n"
            f"- –†–∞–∑–≤–∏—Ç–∏–µ: {answers[8] if len(answers)>8 else ''}\n"
            f"- –¶–µ–ª—å 3‚Äì6 –º–µ—Å: {answers[9] if len(answers)>9 else ''}\n"
        )
        base += profile
    return base

async def deepseek_request(user_message, user_history=None, user_data=None):
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }
        
        messages = []
        # System prompt
        if user_data is not None:
            messages.append({"role": "system", "content": build_system_prompt(user_data)})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_history:
            messages.extend(user_history[-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        messages.append({"role": "user", "content": user_message})
        
        data = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 1500
        }
        
        timeout = aiohttp.ClientTimeout(total=30)
        
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=data
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
                else:
                    print(f"‚ùå API –æ—à–∏–±–∫–∞ {response.status}")
                    return None
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
    if getattr(update.effective_user, 'is_bot', False):
        return
    # –ì–µ–π—Ç–∏–Ω–≥ –ø–æ —Ç–æ–∫–µ–Ω—É –∏ whitelist
    if START_TOKEN:
        args = context.args if hasattr(context, 'args') else []
        token_ok = bool(args and args[0] == START_TOKEN)
        if (user_id not in whitelist_ids) and not token_ok:
            await update.message.reply_text(
                "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
    
    user_states[user_id] = {
        'interview_stage': 0,
        'daily_requests': 0,
        'last_date': datetime.now().strftime('%Y-%m-%d'),
        'interview_answers': [],
        'conversation_history': [],
        'username': username,
        'custom_limit': 10,
    }
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Users (Sheets)
    if users_sheet:
        try:
            users_sheet.append_row([
                user_id, username, 0, '', 0,
                datetime.now().strftime('%Y-%m-%d'), 10, True,
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ Users: {e}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if admin_settings['notify_new_users']:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nID: {user_id}\nUsername: @{username}"
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
    
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç.\n"
        "–Ø ‚Äî MetaPersona, –Ω–µ –±–æ—Ç –∏ –Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–Ø ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ç–≤–æ–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.\n"
        "–ó–¥–µ—Å—å —Ç—ã –Ω–µ –∏—â–µ—à—å –æ—Ç–≤–µ—Ç—ã ‚Äî —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –≤–∏–¥–µ—Ç—å –∏—Ö —Å–∞–º.\n"
        "–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –º—ã—Å–ª–∏—Ç—å –≥–ª—É–±–∂–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–Ω–µ–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–µ–µ.\n"
        "–ß—Ç–æ–±—ã —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ ‚Äú—Ä–µ—à–∞–ª –∑–∞–¥–∞—á–∏‚Äù, –∞ —Å–æ–∑–¥–∞–≤–∞–ª —Å–º—ã—Å–ª—ã, –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–ª—É—á–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n\n"
        "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å ‚Äî –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–∏—Ç—É–∞—Ü–∏—é\n"
        "–°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã\n"
        "–ö—Ä–µ–∞—Ç–∏–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–µ –∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ\n"
        "¬© MetaPersona Culture 2025\n\n"
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:\n\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?"
    )
    
    await update.message.reply_text(welcome_text)
    user_states[user_id]['conversation_history'].append({"role": "assistant", "content": welcome_text})

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if getattr(update.effective_user, 'is_bot', False):
        return
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    if user_id not in user_states:
        await start(update, context)
        return
    
    state = user_states[user_id]
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É
    if user_id in blocked_users:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    state['conversation_history'].append({"role": "user", "content": user_message})
    if history_sheet:
        try:
            history_sheet.append_row([
                user_id,
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'user',
                user_message
            ])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ History: {e}")
    # –≠—Ö–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–∫–æ–Ω—Ç—Ä–æ–ª—å)
    if admin_settings['echo_user_messages']:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üì® {user_id} (@{state.get('username')})\n{user_message}"
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç—Ö–∞ –∞–¥–º–∏–Ω–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    today = datetime.now().strftime('%Y-%m-%d')
    if state['last_date'] != today:
        state['daily_requests'] = 0
        state['last_date'] = today
    
    limit = state.get('custom_limit', 10)
    if state['daily_requests'] >= limit:
        limit_message = (
            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π. –î–∏–∞–ª–æ–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
            "MetaPersona –Ω–µ —Å–ø–µ—à–∏—Ç.\n"
            "–ú—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ–º –Ω–µ —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî –∞ –≥–ª—É–±–∏–Ω—É –º—ã—à–ª–µ–Ω–∏—è.\n\n"
            "–ù–æ –µ—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç,\n"
            "–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî\n"
            "—Ç–∞–º, –≥–¥–µ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π,\n\n"
            "üîó –°–æ–∑–¥–∞–π —Å–≤–æ—é MetaPersona —Å–µ–π—á–∞—Å (—Å—Å—ã–ª–∫–∞ https://taplink.cc/metapersona). \n\n"
            "15 –º–∏–Ω—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –∏ —Ç—ã –∑–∞–ø—É—Å—Ç–∏—à—å —Å–≤–æ—é AI-–ª–∏—á–Ω–æ—Å—Ç—å,\n"
            "–∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è, —Ü–µ–ª–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç–º.\n\n"
            "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç. –≠—Ç–æ –Ω–∞—á–∞–ª–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.\n\n"
            "¬© MetaPersona Culture 2025"
        )
        await update.message.reply_text(limit_message)
        state['conversation_history'].append({"role": "assistant", "content": limit_message})
        return
    
    # –≠–¢–ê–ü 1: –ò–ù–¢–ï–†–í–¨–Æ (–ë–ï–ó –ó–ê–ü–†–û–°–û–í –ö –ò–ò)
    if state['interview_stage'] < len(INTERVIEW_QUESTIONS):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        if state['interview_stage'] > 0:
            state['interview_answers'].append(user_message)
        
        state['interview_stage'] += 1
        
        if state['interview_stage'] < len(INTERVIEW_QUESTIONS):
            next_question = INTERVIEW_QUESTIONS[state['interview_stage']]
            await update.message.reply_text(next_question)
            state['conversation_history'].append({"role": "assistant", "content": next_question})
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            state['interview_answers'].append(user_message)
            completion_text = """üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è.

–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ:
‚Ä¢ –í–∏–¥–µ—Ç—å –≥–ª—É–±–∏–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º—ã—Å–ª–µ–π
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è  
‚Ä¢ –î–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ü–µ–ª—è–º –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ
‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è

–ó–∞–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ –Ω–∞—á–Ω–µ–º!"""
            await update.message.reply_text(completion_text)
            state['conversation_history'].append({"role": "assistant", "content": completion_text})
        return
    
    # –≠–¢–ê–ü 2: –î–ò–ê–õ–û–ì –° AI (–° –ò–°–¢–û–†–ò–ï–ô)
    state['daily_requests'] += 1
    
    await update.message.reply_text("üí≠ –î—É–º–∞—é...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ò–ò
    bot_response = await deepseek_request(user_message, state['conversation_history'], state)
    
    if bot_response:
        await update.message.reply_text(bot_response)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        state['conversation_history'].append({"role": "assistant", "content": bot_response})
        if history_sheet:
            try:
                history_sheet.append_row([
                    user_id,
                    datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'assistant',
                    bot_response
                ])
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ History: {e}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 15 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(state['conversation_history']) > 15:
            state['conversation_history'] = state['conversation_history'][-15:]
    else:
        import random
        fallbacks = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –Ω–∞–¥ –Ω–∏–º –≤–º–µ—Å—Ç–µ.",
            "–≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. –ß—Ç–æ —Ç—ã —Å–∞–º –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å?",
            "–î–∞–≤–∞–π –∏—Å—Å–ª–µ–¥—É–µ–º —ç—Ç–æ –≥–ª—É–±–∂–µ. –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É?"
        ]
        fallback_response = random.choice(fallbacks)
        await update.message.reply_text(fallback_response)
        state['conversation_history'].append({"role": "assistant", "content": fallback_response})
        if history_sheet:
            try:
                history_sheet.append_row([
                    user_id,
                    datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'assistant',
                    fallback_response
                ])
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ History: {e}")

# === –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ===
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    total_users = len(user_states)
    today = datetime.now().strftime('%Y-%m-%d')
    active_today = sum(1 for u in user_states.values() if u['last_date'] == today)
    blocked = len(blocked_users)
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {total_users}\nüü¢ –ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è: {active_today}\nüö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {blocked}"
    )

async def admin_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <user_id>")
        return
    try:
        uid = int(context.args[0])
        blocked_users.add(uid)
        await update.message.reply_text(f"‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {uid}")
    except Exception:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")

async def admin_unblock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <user_id>")
        return
    try:
        uid = int(context.args[0])
        blocked_users.discard(uid)
        await update.message.reply_text(f"‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {uid}")
    except Exception:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")

async def admin_setlimit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlimit <user_id> <limit>")
        return
    try:
        uid = int(context.args[0]); limit = int(context.args[1])
        if uid in user_states:
            user_states[uid]['custom_limit'] = limit
            await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç {uid}: {limit}")
        else:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

async def admin_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    if not context.args or context.args[0] not in ('on','off'):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify on|off")
        return
    admin_settings['notify_new_users'] = (context.args[0] == 'on')
    await update.message.reply_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª' if admin_settings['notify_new_users'] else '–≤—ã–∫–ª'}")

async def admin_echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    if not context.args or context.args[0] not in ('on','off'):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /echo on|off")
        return
    admin_settings['echo_user_messages'] = (context.args[0] == 'on')
    await update.message.reply_text(f"‚úÖ –≠—Ö–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {'–≤–∫–ª' if admin_settings['echo_user_messages'] else '–≤—ã–∫–ª'}")

async def admin_whitelist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    if len(context.args) != 2 or context.args[0] not in ('add','remove'):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /whitelist add|remove <user_id>")
        return
    try:
        uid = int(context.args[1])
        if context.args[0] == 'add':
            whitelist_ids.add(uid)
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ whitelist: {uid}")
        else:
            whitelist_ids.discard(uid)
            await update.message.reply_text(f"‚úÖ –£–¥–∞–ª—ë–Ω –∏–∑ whitelist: {uid}")
    except Exception:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.exception("Unhandled exception in handler", exc_info=context.error)

# === –ó–ê–ü–£–°–ö ===
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ MetaPersona Bot...")
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("stats", admin_stats))
        application.add_handler(CommandHandler("block", admin_block))
        application.add_handler(CommandHandler("unblock", admin_unblock))
        application.add_handler(CommandHandler("setlimit", admin_setlimit))
        application.add_handler(CommandHandler("notify", admin_notify))
        application.add_handler(CommandHandler("echo", admin_echo))
        application.add_handler(CommandHandler("whitelist", admin_whitelist))
        # Error handler
        application.add_error_handler(error_handler)
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üìä –§—É–Ω–∫—Ü–∏–∏: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ (15 —Å–æ–æ–±—â–µ–Ω–∏–π), –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞")
        
        if USE_WEBHOOK:
            port = int(os.environ.get('PORT', '10000'))
            base_url = os.environ.get('WEBHOOK_BASE_URL') or os.environ.get('RENDER_EXTERNAL_URL')
            if not base_url:
                raise RuntimeError('WEBHOOK_BASE_URL/RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω')
            url_path = f"webhook/{BOT_TOKEN}"
            webhook_url = base_url.rstrip('/') + '/' + url_path
            print(f"üåê Webhook: {webhook_url} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            application.run_webhook(
                listen='0.0.0.0',
                port=port,
                url_path=url_path,
                webhook_url=webhook_url,
                drop_pending_updates=True,
            )
        else:
            application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
