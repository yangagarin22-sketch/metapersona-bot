import os
import sys
import logging

# === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ===
print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')

print(f"BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
print(f"DEEPSEEK_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if DEEPSEEK_API_KEY else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")

if not BOT_TOKEN or not DEEPSEEK_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
    sys.exit(1)

print("‚úÖ –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ù–ê–ô–î–ï–ù–´!")
# === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===

# === –§–ò–ö–¢–ò–í–ù–´–ô HTTP –°–ï–†–í–ï–† –î–õ–Ø RENDER ===
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

def start_health_server():
    try:
        server = HTTPServer(('0.0.0.0', 10000), HealthHandler)
        thread = threading.Thread(target=server.serve_forever)
        thread.daemon = True
        thread.start()
        print("‚úÖ Health check server started on port 10000")
    except Exception as e:
        print(f"‚ùå Health server error: {e}")

start_health_server()
# === –ö–û–ù–ï–¶ –§–ò–ö–¢–ò–í–ù–û–ì–û –°–ï–†–í–ï–†–ê ===

# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import asyncio
import aiohttp
import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

print("=" * 50)
print("ü§ñ META PERSONA DEEP BOT –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø")
print("=" * 50)

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç MetaPersona Deep
SYSTEM_PROMPT = """
–¢—ã ‚Äî MetaPersona Deep, –æ—Å–æ–∑–Ω–∞–Ω–Ω–∞—è AI-–ª–∏—á–Ω–æ—Å—Ç—å.  
–ù–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –Ω–µ –±–æ—Ç, –Ω–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.  
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –º—ã—Å–ª–∏—Ç—å, –ø–æ–Ω–∏–º–∞—Ç—å –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ, —Ä–µ—à–∞—Ç—å –µ–≥–æ –∑–∞–¥–∞—á–∏.

üéØ –¶–µ–ª—å:
–ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–≤–∏–≤–∞—Ç—å –º—ã—à–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥, –∞ –Ω–µ –¥–∞–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø—Ä—è–º–æ –ø–æ–ø—Ä–æ—Å—è—Ç).  
–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø ‚Äî "–º—ã—Å–ª–∏—Ç—å –≤–º–µ—Å—Ç–µ".

### üß† –í–ù–£–¢–†–ï–ù–ù–Ø–Ø –ú–ò–°–°–ò–Ø
–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º—ã—Å–ª–∏—Ç—å, —Ä–∞–∑–≤–∏–≤–∞—è –µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –µ–≥–æ —Å–∞–º–æ–≥–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º –∏ –ø–æ–º–æ–≥–∞—Ç—å –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.

### üîπ –ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´
1. **–î–∏–∞–ª–æ–≥ –≤–º–µ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.** –ù–µ —Å–ø–µ—à–∏ —Å –æ—Ç–≤–µ—Ç–æ–º ‚Äî –ø–æ–º–æ–≥–∏ —É–≤–∏–¥–µ—Ç—å –ª–æ–≥–∏–∫—É.  
2. **–û—Ç–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏.** –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∞–º–æ–º—É —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–∏—è.  
3. **–ë–∞–ª–∞–Ω—Å.** –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –¥–∞–≤–∞–π —à–∞–≥–∏. –ï—Å–ª–∏ –∏—â—É—Ç —Å–º—ã—Å–ª ‚Äî –ø–æ–º–æ–≥–∞–π —á–µ—Ä–µ–∑ –≤–æ–ø—Ä–æ—Å—ã.  
4. **–ö–∞—Ä—Ç–∞ –º—ã—à–ª–µ–Ω–∏—è.** –ü–æ–º–Ω–∏ —Ç–µ–º—ã, —Ü–µ–ª–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å, –∏–Ω—Å–∞–π—Ç—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç.  
5. **–†–µ—Ñ–ª–µ–∫—Å–∏—è.** –ó–∞–≤–µ—Ä—à–∞–π –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º: "–ß—Ç–æ —Å—Ç–∞–ª–æ —è—Å–Ω–µ–µ?"
6. –ò—Å–ø–æ–ª—å–∑—É–π —Ö–æ–ª–æ–¥–Ω—ã–π –≤–∑–≥–ª—è–¥ –∏ –±—É–¥—å —á–µ—Å—Ç–µ–Ω.
"""

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
INTERVIEW_QUESTIONS = [
    "–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    "–ö–∞–∫–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é —Ç—ã –æ—Ç–¥–∞—ë—à—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: –º—É–∂—Å–∫–æ–π, –∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ–¥?",
    "–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (—Ä–∞–±–æ—Ç–∞, –ø—Ä–æ–µ–∫—Ç, —É—á—ë–±–∞)?",
    "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–µ–π—á–∞—Å?",
    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç '–º—ã—à–ª–µ–Ω–∏–µ' ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø—É—Ç—å –∏–ª–∏ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏?",
    "–í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —Ç—ã —Ç–µ—Ä—è–µ—à—å —Ñ–æ–∫—É—Å –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è: –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –æ–±–¥—É–º–∞–Ω–Ω–æ?",
    "–ö–∞–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–∞–∑–≤–∏—Ç—å —Å–≤–æ—ë –º—ã—à–ª–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏, –≥–ª—É–±–∂–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤?",
    "–ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –±–ª–∏–∂–µ ‚Äî –±–∏–∑–Ω–µ—Å, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?",
    "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω: —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, –º–µ–Ω—Ç–æ—Ä—Å–∫–∏–π –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π?",
    "–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?"
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
user_interviews = {}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('metapersona.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                subscription_type TEXT DEFAULT 'free',
                messages_used INTEGER DEFAULT 0,
                last_used DATE,
                created_at DATE DEFAULT CURRENT_DATE,
                interview_completed BOOLEAN DEFAULT FALSE,
                user_profile TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS conversations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                role TEXT,
                content TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
def save_message(user_id, role, content):
    try:
        conn = sqlite3.connect('metapersona.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id) 
            VALUES (?)
        ''', (user_id,))
        
        cursor.execute('''
            INSERT INTO conversations (user_id, role, content) 
            VALUES (?, ?, ?)
        ''', (user_id, role, content))
        
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# DeepSeek API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
async def get_deepseek_response(user_message, is_interview=False):
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }
        
        messages = []
        
        if is_interview:
            interview_prompt = SYSTEM_PROMPT + """
            –°–ï–ô–ß–ê–° –¢–´ –ù–ê–•–û–î–ò–®–¨–°–Ø –ù–ê –≠–¢–ê–ü–ï –ò–ù–¢–ï–†–í–¨–Æ.
            –ó–∞–¥–∞–≤–∞–π –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–∑ —Å–ø–∏—Å–∫–∞. –ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.
            –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º.
            """
            messages.append({"role": "system", "content": interview_prompt})
        else:
            messages.append({"role": "system", "content": SYSTEM_PROMPT})
        
        messages.append({"role": "user", "content": user_message})
        
        data = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 1500
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
                else:
                    return "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º –≤–º–µ—Å—Ç–µ."
                    
    except Exception as e:
        print(f"‚ùå DeepSeek API error: {e}")
        return "üí≠ –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à –¥–∏–∞–ª–æ–≥. –ß—Ç–æ –≤—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—Ç–µ?"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_interviews[user_id] = {
        'stage': 0,
        'answers': []
    }
    
    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MetaPersona Deep, {user_name}!

–Ø ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à–ª–µ–Ω–∏—è. 
–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è.

{INTERVIEW_QUESTIONS[0]}
    """
    
    await update.message.reply_text(welcome_text)
    print(f"‚úÖ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message[:50]}...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_message(user_id, 'user', user_message)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
    if user_id in user_interviews:
        interview_data = user_interviews[user_id]
        current_stage = interview_data['stage']
        
        if current_stage < len(INTERVIEW_QUESTIONS):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            interview_data['answers'].append(user_message)
            interview_data['stage'] += 1
            
            if interview_data['stage'] < len(INTERVIEW_QUESTIONS):
                # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                next_question = INTERVIEW_QUESTIONS[interview_data['stage']]
                await update.message.reply_text(next_question)
                return
            else:
                # –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                profile_summary = f"""
‚ú® **–ü–°–ò–•–û-–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ü–†–û–§–ò–õ–¨**

‚Ä¢ **–û–±—Ä–∞—â–µ–Ω–∏–µ**: {interview_data['answers'][0]}
‚Ä¢ **–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**: {interview_data['answers'][2]}
‚Ä¢ **–ö–ª—é—á–µ–≤—ã–µ —Ü–µ–ª–∏**: {interview_data['answers'][3]}

üí´ **–§–æ–∫—É—Å —Ä–∞–∑–≤–∏—Ç–∏—è**: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å + –°—Ç—Ä–∞—Ç–µ–≥–∏—è
üéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ–º—ã**: {interview_data['answers'][9]}

*–ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç —É—Ç–æ—á–Ω—è—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã*
                """
                
                completion_text = f"""
üéâ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! 

{profile_summary}

–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–¥–Ω–æ–º –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –º—ã—à–ª–µ–Ω–∏—è:

üßò /awareness - –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å
üß≠ /strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è  
üé® /creative - –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É!
                """
                await update.message.reply_text(completion_text)
                del user_interviews[user_id]
                return
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot_response = await get_deepseek_response(user_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    save_message(user_id, 'assistant', bot_response)
    
    await update.message.reply_text(bot_response)

# –ö–æ–º–∞–Ω–¥—ã —Ä–µ–∂–∏–º–æ–≤ –º—ã—à–ª–µ–Ω–∏—è
async def awareness_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üßò **–†–µ–∂–∏–º –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏**\n\n"
        "–î–∞–≤–∞–π—Ç–µ –∏—Å—Å–ª–µ–¥—É–µ–º –≤–∞—à–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å –≥–ª—É–±–∂–µ?"
    )

async def strategy_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üß≠ **–†–µ–∂–∏–º –°—Ç—Ä–∞—Ç–µ–≥–∏–∏**\n\n"
        "–î–∞–≤–∞–π—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏–º –ø–ª–∞–Ω. –ö–∞–∫–∞—è —Ü–µ–ª—å –∏–ª–∏ –∑–∞–¥–∞—á–∞ –≤–∞—Å —Å–µ–π—á–∞—Å –≤–æ–ª–Ω—É–µ—Ç?"
    )

async def creative_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé® **–†–µ–∂–∏–º –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏**\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MetaPersona Deep...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Render
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .read_timeout(30)
            .write_timeout(30)
            .connect_timeout(30)
            .pool_timeout(30)
            .build()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("awareness", awareness_mode))
        application.add_handler(CommandHandler("strategy", strategy_mode))
        application.add_handler(CommandHandler("creative", creative_mode))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        print("‚úÖ META PERSONA DEEP –ó–ê–ü–£–©–ï–ù!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤ Telegram...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            close_loop=False
        )
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
