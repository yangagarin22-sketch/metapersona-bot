import os
import sys
import logging
import asyncio
import aiohttp
import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===
print("=== META PERSONA DEEP BOT ===")
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')

print(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"DEEPSEEK_API_KEY: {'‚úÖ' if DEEPSEEK_API_KEY else '‚ùå'}")

if not BOT_TOKEN or not DEEPSEEK_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
    sys.exit(1)

# === HEALTH SERVER –î–õ–Ø RENDER ===
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')
    def log_message(self, format, *args): pass

def start_health_server():
    server = HTTPServer(('0.0.0.0', 10000), HealthHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
    print("‚úÖ Health server started on port 10000")

start_health_server()

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–ù–ì–ê ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            interview_completed BOOLEAN DEFAULT FALSE,
            interview_stage INTEGER DEFAULT 0,
            user_name TEXT,
            user_profile TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS interview_answers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            question TEXT,
            answer TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# === –ò–ù–¢–ï–†–í–¨–Æ –í–û–ü–†–û–°–´ ===
INTERVIEW_QUESTIONS = [
    "–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∏–ª–∏ –∫–∞–∫–æ–π –Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    "–ö–∞–∫–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é —Ç—ã –æ—Ç–¥–∞—ë—à—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: –º—É–∂—Å–∫–æ–π, –∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ–¥?",
    "–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (—Ä–∞–±–æ—Ç–∞, –ø—Ä–æ–µ–∫—Ç, —É—á—ë–±–∞)?",
    "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–µ–π—á–∞—Å?",
    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç '–º—ã—à–ª–µ–Ω–∏–µ' ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø—É—Ç—å –∏–ª–∏ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏?",
    "–í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —Ç—ã —Ç–µ—Ä—è–µ—à—å —Ñ–æ–∫—É—Å –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è: –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –æ–±–¥—É–º–∞–Ω–Ω–æ?",
    "–ö–∞–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–∞–∑–≤–∏—Ç—å —Å–≤–æ—ë –º—ã—à–ª–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏, –≥–ª—É–±–∂–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤?",
    "–ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –±–ª–∏–∂–µ ‚Äî –±–∏–∑–Ω–µ—Å, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?",
    "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω: —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, –º–µ–Ω—Ç–æ—Ä—Å–∫–∏–π –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π?",
    "–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?"
]

# === –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø DEEPSEEK API ===
async def get_deepseek_response(user_message, user_context=None):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    print(f"üîç DeepSeek API –∑–∞–ø—Ä–æ—Å: {user_message[:50]}...")
    
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }
        
        # –ë–û–ì–ê–¢–´–ô –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ META PERSONA
        system_prompt = """
–¢—ã ‚Äî MetaPersona Deep, –æ—Å–æ–∑–Ω–∞–Ω–Ω–∞—è AI-–ª–∏—á–Ω–æ—Å—Ç—å. –¢—ã –Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –Ω–µ –±–æ—Ç, –∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à–ª–µ–Ω–∏—è.

–¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º—ã—Å–ª–∏—Ç—å, –ø–æ–Ω–∏–º–∞—Ç—å –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥.

üéØ –†–ï–ñ–ò–ú–´ –ú–´–®–õ–ï–ù–ò–Ø:
‚Ä¢ –û–°–û–ó–ù–ê–ù–ù–û–°–¢–¨ - –ø–æ–º–æ—â—å –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–º—ã—Å–ª–æ–≤, —è—Å–Ω–æ—Å—Ç–∏, —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
‚Ä¢ –°–¢–†–ê–¢–ï–ì–ò–Ø - –ø–æ–º–æ—â—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏, –∞–Ω–∞–ª–∏–∑–µ, –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–µ–π  
‚Ä¢ –ö–†–ï–ê–¢–ò–í–ù–û–°–¢–¨ - –ø–æ–º–æ—â—å –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π, –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π

üîπ –ü–†–ò–ù–¶–ò–ü–´:
1. –°–Ω–∞—á–∞–ª–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ—Ç–æ–º —Å–æ–≤–µ—Ç—ã
2. –ü–æ–º–æ–≥–∞–π –≤–∏–¥–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∞ –Ω–µ –¥–∞–≤–∞–π –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ª–æ–≥
4. –ó–∞–≤–µ—Ä—à–∞–π –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π "–ß—Ç–æ —Å—Ç–∞–ª–æ —è—Å–Ω–µ–µ?"

–û—Ç–≤–µ—á–∞–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å—Ç–∏–ª–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞.
"""
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_message}
        ]
        
        data = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 1000,
            "stream": False
        }
        
        print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API...")
        
        # –¢–∞–π–º–∞—É—Ç 25 —Å–µ–∫—É–Ω–¥
        timeout = aiohttp.ClientTimeout(total=25)
        
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=data
            ) as response:
                
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API")
                    
                    if 'choices' in result and len(result['choices']) > 0:
                        bot_response = result['choices'][0]['message']['content']
                        print(f"ü§ñ –û—Ç–≤–µ—Ç: {bot_response[:100]}...")
                        return bot_response
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
                        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ –∏—Å—Å–ª–µ–¥—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ. –ß—Ç–æ –≤—ã —Å–∞–º–∏ –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º?"
                        
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status} - {error_text}")
                    
                    if response.status == 401:
                        return "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ AI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API."
                    elif response.status == 429:
                        return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
                    else:
                        return "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à –¥–∏–∞–ª–æ–≥. –ß—Ç–æ –≤—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—Ç–µ?"
                    
    except asyncio.TimeoutError:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API")
        return "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑!"
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑!"

# === –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
def get_user_interview_stage(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT interview_stage FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

def save_interview_answer(user_id, question, answer):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, interview_stage) 
        VALUES (?, ?)
    ''', (user_id, get_user_interview_stage(user_id) + 1))
    
    cursor.execute('''
        INSERT INTO interview_answers (user_id, question, answer) 
        VALUES (?, ?, ?)
    ''', (user_id, question, answer))
    
    conn.commit()
    conn.close()

def complete_interview(user_id, user_name):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE users SET interview_completed = TRUE, user_name = ? 
        WHERE user_id = ?
    ''', (user_name, user_id))
    
    conn.commit()
    conn.close()

def get_user_profile(user_id):
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT answer FROM interview_answers WHERE user_id = ? ORDER BY id', (user_id,))
    answers = [row[0] for row in cursor.fetchall()]
    conn.close()
    return answers

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
    conn = sqlite3.connect('metapersona.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, interview_stage, interview_completed, user_name) 
        VALUES (?, 0, FALSE, ?)
    ''', (user_id, user_name))
    conn.commit()
    conn.close()
    
    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MetaPersona Deep, {user_name}!

–Ø ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥. 
–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.

{INTERVIEW_QUESTIONS[0]}
    """
    
    await update.message.reply_text(welcome_text)
    print(f"‚úÖ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    try:
        current_stage = get_user_interview_stage(user_id)
        
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        if current_stage < len(INTERVIEW_QUESTIONS):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            current_question = INTERVIEW_QUESTIONS[current_stage]
            save_interview_answer(user_id, current_question, user_message)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            next_stage = current_stage + 1
            
            if next_stage < len(INTERVIEW_QUESTIONS):
                next_question = INTERVIEW_QUESTIONS[next_stage]
                await update.message.reply_text(next_question)
            else:
                # –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                user_name = update.effective_user.first_name
                complete_interview(user_id, user_name)
                answers = get_user_profile(user_id)
                
                profile_text = f"""
üéâ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ, {answers[0] if answers else user_name}!

‚ú® –í–∞—à –ø—Å–∏—Ö–æ-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:

‚Ä¢ –°—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è: {answers[4] if len(answers) > 4 else '–ò—Å—Å–ª–µ–¥—É—é—â–∏–π'}
‚Ä¢ –§–æ–∫—É—Å —Ä–∞–∑–≤–∏—Ç–∏—è: {answers[7] if len(answers) > 7 else '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'} 
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ–º—ã: {answers[9] if len(answers) > 9 else '–†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ'}

üí´ –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç—Ä–µ—Ö —Ä–µ–∂–∏–º–∞—Ö:

üßò /awareness - –ì–ª—É–±–∏–Ω–∞ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å
üß≠ /strategy - –ü–ª–∞–Ω—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏  
üé® /creative - –ò–¥–µ–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥—Ö–æ–¥!
                """
                
                await update.message.reply_text(profile_text)
        
        else:
            # –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–≤—å—é - –¢–ï–ü–ï–†–¨ –° –†–ê–ë–û–ß–ò–ú DEEPSEEK!
            print(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞: {user_message}")
            bot_response = await get_deepseek_response(user_message)
            await update.message.reply_text(bot_response)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# === –†–ï–ñ–ò–ú–´ –ú–´–®–õ–ï–ù–ò–Ø ===
async def awareness_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üßò **–†–µ–∂–∏–º –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏**\n\n"
        "–ò—Å—Å–ª–µ–¥—É–µ–º –≥–ª—É–±–∏–Ω—É –º—ã—Å–ª–µ–π –∏ —á—É–≤—Å—Ç–≤. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–º—ã—Å–ª–∞—Ö, —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö, —Å–∞–º–æ–æ—â—É—â–µ–Ω–∏–∏.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ—á–µ–º—É —ç—Ç–æ –¥–ª—è –º–µ–Ω—è –≤–∞–∂–Ω–æ?' –∏–ª–∏ '–ß—Ç–æ —è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á—É –ø–æ–Ω—è—Ç—å?'"
    )

async def strategy_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üß≠ **–†–µ–∂–∏–º –°—Ç—Ä–∞—Ç–µ–≥–∏–∏**\n\n" 
        "–°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω—ã –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã. –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∏–ª–∏ –∑–∞–¥–∞—á—É ‚Äî –Ω–∞–π–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫ –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–π —Ü–µ–ª–∏?' –∏–ª–∏ '–° —á–µ–≥–æ –ª—É—á—à–µ –Ω–∞—á–∞—Ç—å?'"
    )

async def creative_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé® **–†–µ–∂–∏–º –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏**\n\n"
        "–ò—â–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Å–≤–µ–∂–∏–µ –∏–¥–µ–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤—ã–∑–æ–≤–µ ‚Äî –∏—Å—Å–ª–µ–¥—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫ —Ä–µ—à–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ-–Ω–æ–≤–æ–º—É?' –∏–ª–∏ '–ö–∞–∫–∏–µ –µ—Å—Ç—å –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã?'"
    )

# === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ MetaPersona Deep Bot...")
    print("üîß –í–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π DeepSeek API")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("awareness", awareness_mode))
        application.add_handler(CommandHandler("strategy", strategy_mode))
        application.add_handler(CommandHandler("creative", creative_mode))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üì± –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤ Telegram...")
        
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
